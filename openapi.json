{
  "openapi": "3.0.3",
  "info": {
    "version": "2.0.0",
    "title": "OTData API",
    "description": "The software-independent standard interface for the transmission of telematics data.\n- The authentication is specified by the interface operator\n- It is recommended to use OAuth 2.0",
    "contact": {
      "name": "OpenTelematics e.V.",
      "email": "info@opentelematics.io"
    }
  },
  "externalDocs": {
    "description": "Additional Documentation",
    "url": "https://opentelematics.gitlab.io/otdata/docs/"
  },
  "servers": [
    {
      "url": "{protocol}://api.{hostname}/{version}",
      "variables": {
        "hostname": {
          "description": "Self-hosted Enterprise Server or Enterprise Cloud hostname",
          "default": "opentelematics.io"
        },
        "protocol": {
          "enum": ["https"],
          "default": "https"
        }, 
        "version": {
          "enum": ["2.0.0"],
          "default": "2.0.0"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Live Data", 
      "description": ""
    },
    {
      "name": "ETA", 
      "description": ""
    },
    {
      "name": "Tour Management", 
      "description": "Endpoints to manage tours and their belonging drives"
    }, 
    {
      "name": "Tacho Files", 
      "description": ""
    },
    {
      "name": "Devices" 
    },
    {
      "name": "Shipments", 
      "description": "Endpoints to manage shipments"
    },
    {
      "name": "Vehicles", 
      "description": ""
    },
    {
      "name": "Drivers", 
      "description": ""
    },
    {
      "name": "Customers", 
      "description": ""
    },
    {
      "name": "Messages", 
      "description": ""
    },
    {
      "name": "Events"
    }, 
    {
      "name": "Event Subscriptions"
    },
    {
      "name": "Event Webhooks"
    }, 
    {
      "name": "Logs", 
      "description": ""
    }
  ],
  "paths": {
    "/live-data/latest": {
      "get": {
        "summary": "Returns a list of the latest live data",
        "tags": [
          "Live Data"
        ],
        "description": "Filter search: ``customer_id``, ``device_id``, ``vehicle_id``, ``vehicle_group_id``, ``tour_id`` and ``drive_id``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/tour_id_query"
          },
          {
            "name": "fields", 
            "description": "Specifies if just a selection of fields should be returned",
            "in": "query", 
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array", 
              "items": {
                "type": "string", 
                "enum": ["position", "io", "passengers", "temperatures", "can", "tacho", "dtc", "driver_behavior"]
              }
            }
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LiveData"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/live-data/history": {
      "get": {
        "summary": "Returns a list of history of live data",
        "tags": [
          "Live Data"
        ],
        "description": "Filter search: ``customer_id``, ``device_id``, ``vehicle_id``, ``vehicle_group_id``, ``tour_id`` and ``drive_id``\n\nTime selection: ``from`` and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/tour_id_query"
          },
          {
            "$ref": "#/components/parameters/drive_id_query"
          },
          {
            "name": "fields", 
            "description": "Specifies if just a selection of fields should be returned",
            "in": "query", 
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array", 
              "items": {
                "type": "string", 
                "enum": ["position", "io", "passengers", "temperatures", "can", "tacho", "dtc", "driver_behavior"]
              }
            }

          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LiveData"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/live-data/{live-data-id}": {
      "get": {
        "tags": [
          "Live Data"
        ],
        "operationId": "getData",
        "summary": "Returns a specific live data resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/live_data_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveData"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/eta/latest": {
      "get": {
        "summary": "Returns a list of the latest ETAs",
        "tags": [
          "ETA"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ETA"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/eta/history": {
      "get": {
        "summary": "Returns a list of history of ETAs",
        "tags": [
          "ETA"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ETA"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/eta/{eta-id}": {
      "get": {
        "tags": [
          "ETA"
        ],
        "operationId": "getETA",
        "summary": "Returns a specific ETA resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/eta_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ETA"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tacho-files": {
      "get": {
        "summary": "Returns a list of tacho files",
        "tags": [
          "Tacho Files"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_id"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "name": "used_time",
            "in": "query",
            "description": "Indicates to which time tags `from` and `to` refer: ``activity`` refers to the time the activities were stored in the tacho files, ``download`` refers to the download time of the tacho file ``data`` refers to the time stemp of the tacho files",
            "schema": {
              "type": "string",
              "enum": [
                "activity",
                "download",
                "data"
              ],
              "default": "activity"
            }
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TachoFile"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tacho-files/{tacho-file-id}": {
      "get": {
        "tags": [
          "Tacho Files"
        ],
        "operationId": "getTachoFile",
        "summary": "Returns a specific tacho file",
        "parameters": [
          {
            "$ref": "#/components/parameters/tacho_file_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TachoFile"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/{message-channel-id}": {
      "get": {
        "summary": "Returns a list of messages",
        "tags": [
          "Messages"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "name": "sender", 
            "in": "query",
            "required": false, 
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessageFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }, 
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Creates a message",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Message"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/messages/{message-channel-id}/{message-id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "getMessage",
        "summary": "Returns a specific tacho file",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "$ref": "#/components/parameters/message_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/otdata/log": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Returns a list of logs that matches the specified time intervall",
        "description": "If `from` and `to` do not exist, all logs are returned.\nAll logs up to `loglevel` are returned.",
        "parameters": [
          {
            "name": "loglevel",
            "in": "query",
            "description": "From 0 (most important) to 7 (least important):\n0=Emergency, 1=Alert, 2=Critical, 3=Error, 4=Warning, 5=Notice, 6=Informational, 7=Debug",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 7
            }
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Log"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tours": {
      "get": {
        "summary": "Returns a list of tours, optionally with embedded subresources",
        "tags": [
          "Tour Management"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/device_id"
          },
          {
            "$ref": "#/components/parameters/vehicle_id"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/embedRequired"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Depending on the value of ``embed``, subresources will be embedded",
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TourFull"
                          }
                        }, 
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/tour_with_subresources_full"
                          }
                        }
                      ]
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Creates a tour and optionally its subresources",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/create_subresources"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TourCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tours/{tour-id}": {
                "operationId": "getTour", 
                "parameters": {
                  "tour-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Depending on the value of ``create_subressources``, subresources will be embedded",
                  "oneOf":[
                    {
                      "$ref": "#/components/schemas/TourFull"
                    },
                    {
                      "$ref": "#/components/schemas/tour_with_subresources_full"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tours/{tour-id}": {
      "get": {
        "tags": [
          "Tour Management"
        ],
        "operationId": "getTour",
        "summary": "Returns a specific tour",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Updates or creates a tour",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TourUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Deletes a specific tour",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tours/{tour-id}/drives" :{
      "get": {
        "summary": "Returns a list of all drives for a specific tour",
        "tags": [
          "Tour Management"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items":{
                    "$ref": "#/components/schemas/DriveFull"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Creates a drive for a specific tour.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DriveCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tours/{tour-id}/drives/{drive-id}": {
                "operationId": "getDrive", 
                "parameters": {
                  "drive-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriveFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tours/{tour-id}/drives/{drive-id}": {
      "get": {
        "tags": [
          "Tour Management"
        ],
        "operationId": "getTour",
        "summary": "Returns a drive of a specific tour",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriveFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Updates or creates a drive for a specific tour",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DriveUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Deletes a drive of a specific tour",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tours/{tour-id}/drives/{drive-id}/tasks" :{
      "get": {
        "summary": "Returns a list of all tasks for a specific drive",
        "tags": [
          "Tour Management"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items":{
                    "$ref": "#/components/schemas/TaskFull"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Creates a task for a specific drive",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TaskCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tours/{tour-id}/drives/{drive-id}/tasks/{task-id}": {
                "operationId": "getTask", 
                "parameters": {
                  "task-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tours/{tour-id}/drives/{drive-id}/tasks/{task-id}": {
      "get": {
        "tags": [
          "Tour Management"
        ],
        "operationId": "getTask",
        "summary": "Returns a task of a specific drive",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/task_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Updates or creates a task for a specific drive",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/task_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TaskUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Deletes a task of a specific drive",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/task_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "summary": "Returns a list of devices",
        "tags": [
          "Devices"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeviceFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates a device",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeviceCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /devices/{device-id}": {
                "operationId": "getDevice", 
                "parameters": {
                  "device-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/devices/{device-id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "operationId": "getDevice",
        "summary": "Returns a specific device",
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Updates or creates a device",
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeviceUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Deletes a device",
        "parameters": [
          {
            "$ref": "#/components/parameters/device_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/drivers": {
      "get": {
        "summary": "Returns a list of drivers",
        "tags": [
          "Drivers"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DriverFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Drivers"
        ],
        "summary": "Creates a driver",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DriverCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /drivers/{driver-id}": {
                "operationId": "getDriver", 
                "parameters": {
                  "driver-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/drivers/{driver-id}": {
      "get": {
        "tags": [
          "Drivers"
        ],
        "operationId": "getDriver",
        "summary": "Returns a specific driver",
        "parameters": [
          {
            "$ref": "#/components/parameters/driver_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Drivers"
        ],
        "summary": "Updates or creates a driver",
        "parameters": [
          {
            "$ref": "#/components/parameters/driver_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DriverUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Drivers"
        ],
        "summary": "Deletes a driver",
        "parameters": [
          {
            "$ref": "#/components/parameters/driver_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Returns a list of customers",
        "tags": [
          "Customers"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomerFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Creates a customer.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomerCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /customers/{customer-id}": {
                "operationId": "getCustomer", 
                "parameters": {
                  "customer-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/customers/{customer-id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "getCustomer",
        "summary": "Returns a specific customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Updates or creates a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomerUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Deletes a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/vehicles": {
      "get": {
        "summary": "Returns a list of vehicles",
        "tags": [
          "Vehicles"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VehicleFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Creates a vehicle.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/VehicleCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /vehicles/{vehicle-id}": {
                "operationId": "getVehicle", 
                "parameters": {
                  "vehicle-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/vehicles/{vehicle-id}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "getVehicle",
        "summary": "Returns a specific vehicle",
        "parameters": [
          {
            "$ref": "#/components/parameters/vehicle_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Updates or creates a vehicle",
        "parameters": [
          {
            "$ref": "#/components/parameters/vehicle_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/VehicleUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Deletes a vehicle",
        "parameters": [
          {
            "$ref": "#/components/parameters/vehicle_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/shipments": {
      "get": {
        "summary": "Returns a list of shipments",
        "tags": [
          "Shipments"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id"
          },
          {
            "$ref": "#/components/parameters/tour_id_query"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ShipmentFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Shipments"
        ],
        "summary": "Creates a shipment.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShipmentCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /shipments/{shipment-id}": {
                "operationId": "getShipment", 
                "parameters": {
                  "shipment-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/shipments/{shipment-id}": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "operationId": "getShipment",
        "summary": "Returns a specific shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/shipment_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Shipments"
        ],
        "summary": "Updates or creates a shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/shipment_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShipmentUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Shipments"
        ],
        "summary": "Deletes a shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/shipment_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tour-events": {
      "get": {
        "summary": "Returns a list of tour events",
        "tags": [
          "Events"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/tour_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TourEvent"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tour-events/{tour-event-id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getTourEvent",
        "summary": "Returns a specific tour event",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TourEvent"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/drive-events": {
      "get": {
        "summary": "Returns a list of drive events",
        "tags": [
          "Events"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DriveEvent"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/drive-events/{drive-event-id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getDriveEvent",
        "summary": "Returns a specific drive event",
        "parameters": [
          {
            "$ref": "#/components/parameters/drive_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriveEvent"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/task-events": {
      "get": {
        "summary": "Returns a list of task events",
        "tags": [
          "Events"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/task_uri_query"
          },
          {
            "$ref": "#/components/parameters/task_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskEvent"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/task-events/{task-event-id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getTaskEvent",
        "summary": "Returns a specific Task Event",
        "parameters": [
          {
            "$ref": "#/components/parameters/task_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEvent"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/resource-events": {
      "get": {
        "summary": "Returns a list of resource events",
        "tags": [
          "Events"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource_uri_query"
          },
          {
            "$ref": "#/components/parameters/resource_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResourceEvent"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/resource-events/{resource-event-id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getResource",
        "summary": "Returns a specific resource event",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceEvent"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/tour-event": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a tour event.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TourEvent"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/drive-event": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a drive event",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DriveEvent"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/task-event": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a task event.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TaskEvent"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/resource-event": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a resource event.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ResourceEvent"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/live-data": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a set of live data.",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LiveData"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/tacho-file": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a tacho file",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TachoFile"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/eta": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends an ETA",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ETA"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/message": {
      "post": {
        "tags": [
          "Event Webhooks"
        ],
        "summary": "Sends a message",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageFull"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/subscriptions":{
      "get": {
        "summary": "Returns a list of subscriptions",
        "tags": [
          "Event Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/callback_url"
          },
          {
            "$ref": "#/components/parameters/event_types"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionFull"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/Cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Event Subscriptions"
        ],
        "summary": "Creates a subscription to an event",
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscriptionCreate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /subscriptions/{subscription-id}": {
                "operationId": "getSubscription", 
                "parameters": {
                  "subscription-id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag",
                "required": true
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionFull"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/subscriptions/{subscription-id}": {
      "get": {
        "tags": [
          "Event Subscriptions"
        ],
        "operationId": "getSubscription",
        "summary": "Returns a specific subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag", 
                "required": true
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionFull"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Event Subscriptions"
        ],
        "summary": "Updates or creates a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscriptionUpdate"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": true
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version",
                "required": false
              }, 
              "otid": {
                "$ref": "#/components/headers/otid",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Event Subscriptions"
        ],
        "summary": "Deletes a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/otid"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "428": {
            "$ref": "#/components/responses/PreconditionRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "examples": {
      "tour_uri": {
        "value": {
          "uri": "/tours/123"
        }
      },
      "drives_uri": {
        "$ref": "#/components/examples/drive_event_uri",
        "value": {
          "uri": "/tours/123/drives/", 
          "drive_uri": {
            "$ref": "#/components/examples/drive_uri"
          }
        }
      },
      "drive_uri": {
        "value": "/tours/123/drives/123"
      },
      "tasks_uri": {
        "value": "/tours/123/drives/123/tasks"
      },
      "task_uri": {
        "value": "/tours/123/drives/123/tasks/123"
      },
      "shipment_uri": {
        "value": "/shipments/123"
      },
      "customer_uri": {
        "value": "/customers/123"
      },
      "driver_uri": {
        "value": "/drivers/123"
      },
      "device_uri": {
        "value": "/devices/123"
      },
      "vehicle_uri": {
        "value": "/vehicles/123"
      },
      "message_uri": {
        "value": "/messages/123/123"
      },
      "tour_event_uri": {
        "value": "/tour-events/123"
      },
      "drive_event_uri": {
        "value": "/drive-events/123"
      },
      "task_event_uri": {
        "value": "/task-events/123"
      },
      "resource_event_uri": {
        "value": "/resource-events/123"
      }, 
      "tacho_file_uri": {
        "value": "/tacho-files/123"
      }, 
      "live_data_uri": {
        "value": "/live-data/123"
      }, 
      "eta_uri": {
        "value": "/eta/123"
      }, 
      "subscription_uri": {
        "value": "/subscriptions/123"
      }
    },
    "headers": {
      "etag": {
        "description": "Entity Tag as defined by [RFC2068](https://datatracker.ietf.org/doc/html/rfc2068#section-14.20)",
        "schema": {
          "type": "string"
        }
      },
      "cache_control": {
        "description": "Header as defined by [RFC7234](https://datatracker.ietf.org/doc/html/rfc7234#section-5.2)",
        "schema": {
          "type": "string"
        }
      },
      "otid": {
        "description": "Registered OpenTelematics ID of the requester",
        "schema": {
          "type": "string"
        }
      },
      "api_version": {
        "description": "Version of the OpenTelematics API used, e.g.:`\"2.0.0\"`",
        "schema": {
          "type": "string",
          "pattern": "^[1-9][0-9]*\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)$"
        }
      }
    },
    "parameters": {
      "access_token": {
        "name": "access-token",
        "in": "header",
        "description": "JSON Web Token",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/AccessToken"
        }
      },
      "api_version": {
        "in": "header",
        "name": "api-version",
        "description": "Version of the OpenTelematics API used, e.g.:`\"2.0.0\"`",
        "required": false,
        "schema": {
          "$ref": "#/components/headers/api_version"
        }
      },
      "from": {
        "name": "from",
        "in": "query",
        "description": "Only data from this point on are returned",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "to": {
        "name": "to",
        "in": "query",
        "description": "Only data up to this point in time are returned",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "callback_url":{
        "name": "callback_url", 
        "in": "query", 
        "schema": {
          "$ref":  "#/components/schemas/URL"
        }, 
        "required": false
      },
      "callback_url_path":{
        "name": "callback_url", 
        "in": "path", 
        "schema": {
          "$ref":  "#/components/schemas/URL"
        }, 
        "required": true
      },
      "event_types": {
        "in": "query",
        "name": "event_types", 
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array", 
          "items":{
            "$ref": "#/components/schemas/EventType"
          }          
        }
      },
      "tour_event_id_path":{
        "name": "tour-event-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "drive_event_id_path":{
        "name": "drive-event-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "task_event_id_path":{
        "name": "task-event-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "resource_event_id_path":{
        "name": "resource-event-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "subscription_id_path": {
        "name": "subscription-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "message_id_path": {
        "name": "message-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "message_channel_id_path": {
        "name": "message-channel-id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "otid": {
        "in": "header",
        "name": "otid",
        "description": "Registered OpenTelematics ID of the requester",
        "required": true,
        "schema": {
          "$ref": "#/components/headers/otid"
        }
      },
      "customer_id": {
        "name": "customer_id",
        "in": "query",
        "description": "Customer ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "customer_idRequired": {
        "name": "customer_id",
        "in": "query",
        "description": "Customer ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "customer_id_path": {
        "name": "customer-id",
        "in": "path",
        "description": "Customer ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }, 
        "required": true
      },
      "vehicle_group_id": {
        "name": "vehicle_group_id",
        "in": "query",
        "description": "Vehicle Group ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "device_id": {
        "name": "device_id",
        "in": "query",
        "description": "Device ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "vehicle_id": {
        "name": "vehicle_id",
        "in": "query",
        "description": "Vehicle ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "vehicle_id_path": {
        "name": "vehicle_id",
        "in": "path",
        "description": "Vehicle ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        },
        "required": true
      },
      "data_id_path": {
        "name": "data_id",
        "in": "path",
        "description": "Data ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        },
        "required": true
      },
      "driver_id_path": {
        "name": "driver_id",
        "in": "path",
        "description": "Driver ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        },
        "required": true
      },
      "device_id_path": {
        "name": "device_id",
        "in": "path",
        "description": "Vehicle ID",
        "schema": {
          "$ref": "#/components/schemas/IDType"
        },
        "required": true
      },
      "device_idRequired": {
        "name": "device_id",
        "in": "query",
        "description": "Device ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "cursor": {
        "name": "cursor",
        "in": "query",
        "required": false,
        "description": "Cursor for cursor-based pagination. Use ``next_cursor`` from response body to get the next page.",
        "schema": {
          "$ref": "#/components/schemas/Cursor"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "The limit parameter sets a maximum number of results to return per call.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 30
        }
      },
      "embedRequired": {
        "name": "embed",
        "in": "query",
        "required": true,
        "description": "Whether subresources should be embedded in the response",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "live_data_id_path": {
        "name": "live-data-id", 
        "in": "path", 
        "required": true, 
        "description": "Live Data ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "eta_id_path": {
        "name": "eta-id", 
        "in": "path", 
        "required": true, 
        "description": "ETA ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "tour_id_path": {
        "name": "tour-id", 
        "in": "path", 
        "required": true, 
        "description": "Tour ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "tour_id_query": {
        "name": "tour_id", 
        "in": "query", 
        "required": false, 
        "description": "Tour ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "drive_id": {
        "name": "drive-id", 
        "in": "path", 
        "required": true, 
        "description": "Drive ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "drive_id_query": {
        "name": "drive_id", 
        "in": "query", 
        "required": false, 
        "description": "Drive ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "task_id_path": {
        "name": "task-id", 
        "in": "path", 
        "required": true, 
        "description": "Task ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "shipment_id_path": {
        "name": "shipment-id", 
        "in": "path", 
        "required": true, 
        "description": "Shipment ID", 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "tacho_file_id_path": {
        "name": "tacho-file-id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/IDType"
        }
      },
      "if_none_match": {
        "in": "header",
        "name": "If-None-Match",
        "description": "Newest known entity tag of the resource as defined by [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232#section-3.2)",
        "schema": {
          "type": "string"
        }, 
        "required": false
      },
      "if_match": {
        "in": "header",
        "name": "If-Match",
        "description": "Newest known entity tag of the resource as defined by [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232#section-3.1)",
        "schema": {
          "type": "string"
        }, 
        "required": true
      }, 
      "tour_uri_query": {
        "name": "tour_uri", 
        "in": "query", 
        "required": false, 
        "description": "URI of the tour the event refers to",
        "schema": {
          "$ref": "#/components/schemas/URI"
        }
      },
      "drive_uri_query": {
        "name": "drive_uri", 
        "in": "query", 
        "required": false, 
        "description": "URI of the drive the event refers to",
        "schema": {
          "$ref": "#/components/schemas/URI"
        }
      },
      "task_uri_query": {
        "name": "task_uri", 
        "in": "query", 
        "required": false, 
        "description": "URI of the task the event refers to",
        "schema": {
          "$ref": "#/components/schemas/URI"
        }
      },
      "resource_uri_query": {
        "name": "resource_uri", 
        "in": "query", 
        "required": false, 
        "description": "URI of the resource the event refers to",
        "schema": {
          "$ref": "#/components/schemas/URI"
        }
      }, 
      "tour_event_query": {
        "name": "tour_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the tour event",
        "schema": {
          "$ref": "#/components/schemas/TourEventTypes"
        }
      },
      "drive_event_query": {
        "name": "drive_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the drive event",
        "schema": {
          "$ref": "#/components/schemas/DriveEventTypes"
        }
      },
      "task_event_query": {
        "name": "task_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the task event",
        "schema": {
          "$ref": "#/components/schemas/TaskEventTypes"
        }
      },
      "resource_event_query": {
        "name": "resource_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the resource event",
        "schema": {
          "$ref": "#/components/schemas/ResourceEventTypes"
        }
      }, 
      "create_subresources": {
        "name": "create_subresources", 
        "in": "query", 
        "required": true, 
        "description": "Type of the resource event",
        "schema": {
          "type": "boolean", 
          "default": false
        }
      }
    },
    "responses": {
      "NoContent": {
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "description": "No Content. The server has successfully fulfilled the request and there is no additional content to return in the response payload body"
      },
      "NotModified": {
        "description": "Not Modified. The resource has not been modified since the version specified by the request header If-None-Match.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request. The server cannot or will not process the request, due to a client error.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized. The request requires user authentication.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. The server understood the request, but refuses to authorize\nit.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found. The server has not found anything matching the effective\nrequest URI.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "PreconditionFailed": {
        "description": "Precondition Failed. One or more conditions (e.g. If-None-Match header) given in the request header fields evaluated to false when tested on the server.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "UnsupportedMediaType": {
        "description": "Unsupported Media Type. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "PreconditionRequired": {
        "description": "Precondition Required. The origin server requires the request to be conditional.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error. The server encountered an unexpected condition\nwhich prevented it from fulfilling the request.",
        "headers": {
          "api-version": {
            "$ref": "#/components/headers/api_version",
            "required": true
          }, 
          "otid": {
            "$ref": "#/components/headers/otid",
            "required": true
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"  
            }
          }
        }
      }
    },
    "requestBodies": {
      "TourCreate": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Depending on the value of ``create_subressources``, subresources will be embedded in the body",
              "oneOf":[
                {
                  "$ref": "#/components/schemas/Tour"
                }, 
                {
                  "$ref": "#/components/schemas/tour_with_subresources"  
                }
              ]
            }
          }
        },
        "required": true
      }, 
      "TourUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TourFull"
            }
          }
        },
        "required": true
      },
      "DriveCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Drive"
            }
          }
        },
        "required": true
      },
      "DriveUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DriveFull"
            }
          }
        },
        "required": true
      },
      "TaskCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Task"
            }
          }
        },
        "required": true
      },
      "TaskUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TaskFull"
            }
          }
        },
        "required": true
      },
      "ShipmentCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Shipment"
            }
          }
        },
        "required": true
      },
      "ShipmentUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShipmentFull"
            }
          }
        },
        "required": true
      },
      "VehicleCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Vehicle"
            }
          }
        },
        "required": true
      },
      "VehicleUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VehicleFull"
            }
          }
        },
        "required": true
      },
      "DeviceCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Device"
            }
          }
        },
        "required": true
      },
      "DeviceUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeviceFull"
            }
          }
        },
        "required": true
      },
      "DriverCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Driver"
            }
          }
        },
        "required": true
      },
      "DriverUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DriverFull"
            }
          }
        },
        "required": true
      }, 
      "CustomerCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        },
        "required": true
      },
      "CustomerUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomerFull"
            }
          }
        },
        "required": true
      }, 
      "SubscriptionCreate": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "SubscriptionUpdate": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubscriptionFull"
            }
          }
        }
      }, 
      "TourEvent":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TourEvent"
            }
          }
        }
      },
      "DriveEvent":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DriveEvent"
            }
          }
        }
      },
      "TaskEvent":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TaskEvent"
            }
          }
        }
      }, 
      "ResourceEvent":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResourceEvent"
            }
          }
        }
      }, 
      "LiveData":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LiveData"
            }
          }
        }
      },
      "TachoFile":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TachoFile"
            }
          }
        }
      },
      "ETA":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ETA"
            }
          }
        }
      }, 
      "Message": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      }, 
      "MessageFull": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageFull"
            }
          }
        }
      }
    },
    "schemas": {
      "ProblemDetails": {
        "type": "object",
        "description": "Problem details as defined by [RFC7807](https://datatracker.ietf.org/doc/html/rfc7807)",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri-reference",
            "description": "A URI reference that uniquely identifies the problem type only in the context of the provided API. Opposed to the specification in RFC-7807, it is neither recommended to be dereferencable and point to a human-readable documentation nor globally unique for the problem type.",
            "default": "about:blank",
            "example": "/problem/connection-error"
          },
          "title": {
            "type": "string",
            "description": "A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\n",
            "example": "Internal Server Error."
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "The HTTP status code generated by the origin server for this occurrence of the problem.",
            "minimum": 100,
            "maximum": 600,
            "exclusiveMaximum": true,
            "example": 500
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.",
            "example": "Connection to database timed out"
          },
          "instance": {
            "type": "string",
            "format": "uri-reference",
            "description": "A URI reference that identifies the specific occurrence of the problem, e.g. by adding a fragment identifier or sub-path to the problem type. May be used to locate the root of this problem in the source code.",
            "example": "/problem/connection-error#token-info-read-timed-out"
          }
        }
      },
      "DeviceFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          }, 
          {
            "$ref": "#/components/schemas/Device"
          }
        ]
      },
      "Device": {
        "type": "object", 
        "properties": {
          "customer_id": {
            "description": "Associated Customer", 
            "$ref": "#/components/schemas/IDType"
          },
          "imei": {
            "type": "string",
            "minLength": 15,
            "maxLength": 15,
            "description": "IMEI",
            "example": ""
          },
          "sn": {
            "type": "string",
            "maxLength": 30,
            "description": "Serial number",
            "example": ""
          }
        }
      },
      "VehicleFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          }, 
          {
            "$ref": "#/components/schemas/Vehicle"
          }
        ]
      },
      "Vehicle": {
        "type": "object",
        "properties": {
          "vehicle_group_id": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/vehicle_group_id"
                }
              ]
            },
            "description": "List of assigned vehicle groups"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "description": "Name of vehicle",
            "example": "MH-MH 1"
          },
          "plate_number": {
            "type": "string",
            "maxLength": 150,
            "description": "Plate number of vehicle",
            "example": "MH-MH 1"
          },
          "manufacturer": {
            "type": "string",
            "maxLength": 150,
            "description": "Manufacturer",
            "example": "Mercedes-Benz"
          },
          "model": {
            "type": "string",
            "maxLength": 150,
            "description": "Model type",
            "example": "1844 LS"
          },
          "construction_year": {
            "type": "integer",
            "format": "int32",
            "description": "Building Year",
            "example": 2008
          },
          "vin": {
            "type": "string",
            "minLength": 17,
            "maxLength": 17,
            "pattern": "^[A-HJ-NPR-Z0-9]{13}[0-9]{4}$",
            "description": "Vehicle identification number",
            "example": "WDB9340321L333168"
          }
        }
      },
      "LiveData": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/DeviceID"
          },
          {
            "$ref": "#/components/schemas/VehicleID"
          },
          {
            "$ref": "#/components/schemas/VehicleGroupID"
          },
          {
            "$ref": "#/components/schemas/CustomerID"
          },
          {
            "$ref": "#/components/schemas/TourID"
          }
        ],
        "properties": {
          "driver_id": {
            "$ref": "#/components/schemas/DriverID", 
            "description": "Driver ID of the driver"
          },
          "codriver_id": {
            "$ref": "#/components/schemas/DriverID", 
            "description": "Driver ID of the co-driver"
          },
          "timestamp":{
            "$ref": "#/components/schemas/Timestamp"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "io": {
            "$ref": "#/components/schemas/IOState"
          },
          "passengers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "temperatures": {
            "$ref": "#/components/schemas/Temp"
          },
          "can": {
            "$ref": "#/components/schemas/CanData"
          },
          "tacho": {
            "$ref": "#/components/schemas/Tacho"
          },
          "dtc": {
            "$ref": "#/components/schemas/DTC"
          },
          "driver_behavior": {
            "$ref": "#/components/schemas/DriverBehavior"
          }
        },
        "required": [
          "id",
          "timestamp"
        ]
      },
      "Reason": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Reason number for the message"
          },
          "name": {
            "type": "string",
            "maxLength": 30,
            "description": "Reason for the message"
          }
        }
      },
      "IOState": {
        "type": "object",
        "properties": {
          "ignition": {
            "type": "boolean",
            "description": "State of ignition"
          },
          "battery": {
            "type": "boolean",
            "description": "State of external battery input"
          },
          "input": {
            "example": [
              1,
              2,
              "..."
            ],
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Input states (input1, input2, …)"
          },
          "output": {
            "example": [
              1,
              2,
              "..."
            ],
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Output states (input1, input2, …)"
          },
          "analog": {
            "example": [
              1.1,
              2.2,
              "..."
            ],
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "Analog values"
          },
          "voltage": {
            "type": "number",
            "format": "float",
            "description": "Battery input voltage"
          },
          "backupbattery": {
            "type": "number",
            "format": "float",
            "description": "Backup battery input voltage"
          }
        }
      },
      "Position": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28.000Z"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "heading": {
            "type": "integer",
            "format": "int32",
            "description": "Direction in degrees (0-360)"
          },
          "speed": {
            "type": "number",
            "format": "float",
            "description": "Speed in km/h"
          },
          "altitude": {
            "type": "integer",
            "format": "int32",
            "description": "Altitude in m"
          },
          "accuracy": {
            "type": "integer",
            "format": "int32",
            "description": "Accuracy in m"
          },
          "characteristic": {
            "type": "string",
            "enum": [
              "satellite",
              "gsm",
              "indirect"
            ],
            "description": "`satellite`: GPS, Galileo, GLONASS etc.\n`indirect`: Bluetooth, Wi-Fi etc."
          }
        },
        "required": [
          "datetime",
          "coordinates"
        ]
      },
      "CustomerFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/Driver"
          }
        ]
      },
      "Customer": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "DriverFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          }, 
          {
            "$ref": "#/components/schemas/DriverLinkFields"
          },
          {
            "$ref": "#/components/schemas/Driver"
          }
        ]
      },
      "DriverLinkFields": {
        "type": "object", 
        "properties": {
          "tours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tour_id"
            }
          }
        }
      },
      "Driver": {
        "type": "object",
        "properties": {
          "customer_id": {
            "$ref": "#/components/schemas/customer_id"
          },
          "driver_card": {
            "$ref": "#/components/schemas/DriverCard"
          }
        }
      },
      "Passenger": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IDType"
              }
            ],
            "description": "Passenger ID"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "description": "Passenger name"
          }
        }
      },
      "Temp": {
        "type": "object",
        "properties": {
          "setpoints": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataStatus"
                }
              ],
              "properties": {
                "value": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "value": {
                      "type": "number",
                      "format": "float",
                      "description": "in °C"
                    }
                  }
                }
              }
            }
          },
          "temperatures": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataStatus"
                }
              ],
              "properties": {
                "value": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "value": {
                      "type": "number",
                      "format": "float",
                      "description": "in °C"
                    },
                    "alert": {
                      "type": "boolean",
                      "description": "alert condition set"
                    }
                  }
                }
              }
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataStatus"
                }
              ],
              "properties": {
                "value": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "address_type": {
            "type": "string",
            "enum": [
              "customer",
              "personal",
              "invoice",
              "shipper",
              "consignee",
              "shippingPartner",
              "receivingPartner",
              "forwarder",
              "service"
            ],
            "description": "Type to distinguish between different types of addresses, so that\nyou can have several addresses in one list"
          },
          "name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "Street name and possibly number"
          },
          "addition": {
            "type": "string",
            "description": "Further address information or additional details"
          },
          "province": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip_code": {
            "description": "zip code or postal code",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country_code": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^[A-Z]{3}$",
            "description": "ISO-3166 ALPHA-3"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "poiname": {
            "type": "string",
            "maxLength": 30
          },
          "poigroup": {
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "Avis": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Hr Max Muster"
          },
          "phone": {
            "type": "string",
            "example": "+41793332211"
          },
          "ismandatory": {
            "type": "boolean",
            "description": "Indicates if it is mandatory to notify",
            "example": true
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "maxLength": 30
          },
          "fax": {
            "type": "string",
            "maxLength": 30
          },
          "mobile": {
            "type": "string",
            "maxLength": 30
          },
          "email": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "CanData": {
        "type": "object",
        "properties": {
          "caninstant": {
            "type": "object",
            "properties": {
              "speed": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "Speed in km/h"
                  }
                }
              },
              "rpm": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "Rotational speed of engine in rpm"
                  }
                }
              },
              "fuelconsmpt": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "minimum": 0,
                    "description": "Fuel consumption in l/h"
                  }
                }
              },
              "fuellevel": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0,
                      "maximum": 100,
                      "description": "Fuel level primary, secondary, ... tank in %"
                    }
                  }
                }
              },
              "axelweight": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                    },
                    "description": "Axel 1,2,... Weight in kg"
                  }
                }
              },
              "turbopressure": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Turbo pressure in kPa"
                  }
                }
              },
              "coolanttemp": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "Coolant temperature in °C"
                  }
                }
              },
              "acceleratorpdl": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Accelerator pedal in %"
                  }
                }
              },
              "torque": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 250,
                    "description": "Torque in %"
                  }
                }
              },
              "battvolt": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "Battery voltage in V"
                  }
                }
              },
              "coolantlvl": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Coolant level in %"
                  }
                }
              },
              "oiltemp": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "Oil temperature in °C"
                  }
                }
              },
              "oillvl": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Oil level in %"
                  }
                }
              },
              "throttle": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Throttle position in %"
                  }
                }
              },
              "airinltpres": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Air inlet pressure in kPa"
                  }
                }
              },
              "gear": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "description": "0=neutral / 45(-)=reverse / 43(+)=forward / 127 = parked"
                  }
                }
              },
              "seatbelt": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "enum": [
                      "off",
                      "on"
                    ],
                    "default": "off"
                  }
                }
              },
              "oilpressure": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Engine oil pressure in kPa"
                  }
                }
              },
              "wettankpressure": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Wet tank air pressure in kPa"
                  }
                }
              },
              "pto": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "enum": [
                      "none",
                      "atLeastOne"
                    ],
                    "default": "none"
                  }
                }
              },
              "ignswtch": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "enum": [
                      "off",
                      "on"
                    ],
                    "default": "off"
                  }
                }
              }
            }
          },
          "cantotal": {
            "type": "object",
            "properties": {
              "mileage": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Mileage in km"
                  }
                }
              },
              "totalfuel": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Total fuel in liter"
                  }
                }
              },
              "fuelusedatcruise": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "minimum": 0,
                    "description": "Fuel used at cruise in liter"
                  }
                }
              },
              "fuelusedatdrive": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "minimum": 0,
                    "description": "Fuel used at drive in liter"
                  }
                }
              },
              "idlelonger5": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Number of idle longer than 5 min"
                  }
                }
              },
              "idlelonger10": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Number of idle longer than 10 min"
                  }
                }
              },
              "totalidletime": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Total idle time in sec"
                  }
                }
              },
              "totaltimepto": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Total pto time in sec"
                  }
                }
              },
              "timecruise": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Cruise time in sec."
                  }
                }
              },
              "rpmthreshold": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                    },
                    "description": "Rpm > treshold 1,2,3 sec."
                  }
                }
              },
              "speedthreshold": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                    },
                    "description": "Speed > threshold speed 1,2,3 sec."
                  }
                }
              },
              "brakeapplications": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Number of brake applications"
                  }
                }
              },
              "clutchapplications": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Number of clutch applications"
                  }
                }
              },
              "engineon": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Time engine is on in sec"
                  }
                }
              },
              "timetorque90": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Time torque > 90%  in sec"
                  }
                }
              },
              "fuelrateavg": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "minimum": 0,
                    "description": "Fuel rate average in l/h"
                  }
                }
              },
              "totaldistancecruisecontrol": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Total vehicle distance with cruise control"
                  }
                }
              },
              "totalfuelconsumptionwithpto": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataStatus"
                  }
                ],
                "properties": {
                  "value": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0,
                    "description": "Total fuel consumption with pto"
                  }
                }
              }
            }
          }
        }
      },
      "Tacho": {
        "type": "object",
        "description": "`workingstate`, `timerelstate`, `cardpresent`, `overspeed`,\n`systemevent`, `direction` and `speed` are described and specified as in\nSAE J 1939",
        "properties": {
          "workstate": {
            "type": "object",
            "properties": {
              "driver1": {
                "type": "string",
                "enum": [
                  "rest",
                  "available",
                  "work",
                  "drive",
                  "error",
                  "n/a"
                ]
              },
              "driver2": {
                "type": "string",
                "enum": [
                  "rest",
                  "available",
                  "work",
                  "drive",
                  "error",
                  "n/a"
                ]
              }
            },
            "description": "State of work of the drivers"
          },
          "timerelstate": {
            "type": "object",
            "properties": {
              "driver1": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "driver2": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            },
            "description": "Indicates if the driver approaches or exceeds working time limits\n0=normal / 1=15 min. bef. 4 1/2h / 2=4 1/2h reached / 3=15 min bef. 9h / 4=9h reached / 5=15min bef. 16h / 6=16h reached / 14=Error / 15=n/a"
          },
          "cardpresent": {
            "type": "object",
            "properties": {
              "driver1": {
                "type": "boolean"
              },
              "driver2": {
                "type": "boolean"
              }
            },
            "description": "Indicates the presence of a driver card"
          },
          "overspeed": {
            "type": "boolean",
            "description": "Indicates whether the vehicle is exceeding the legal speed limit set\nin the tachograph"
          },
          "systemevent": {
            "type": "boolean",
            "description": "Indicates that a tachograph event has occurred. This may include\npower supply interruption, interruption of the speed sensor,\nincorrect data on the driver card, driving without a driver card,\nillegal removal of a driver card, insertion of a driver card during\ndriving, and time adjustment"
          },
          "direction": {
            "type": "string",
            "enum": [
              "forward",
              "reverse"
            ],
            "description": "Indicates the direction of the vehicle"
          },
          "speed": {
            "type": "number",
            "format": "float",
            "description": " Speed of the vehicle registered by the tachograph"
          },
          "cardid": {
            "type": "object",
            "properties": {
              "driver1": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IDType"
                  }
                ],
                "description": "Card ID of driver 1"
              },
              "driver2": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IDType"
                  }
                ],
                "description": "Card ID of driver 2"
              }
            },
            "description": "Driver card IDs"
          },
          "rpm": {
            "type": "integer",
            "format": "int32",
            "description": "Output shaft speed  rpm"
          }
        }
      },
      "DTC": {
        "type": "object",
        "properties": {
          "dtcstatus": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Generic malfunction indicator light"
              }
            }
          },
          "dtcred": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Red malfunction indicator light"
              }
            }
          },
          "dtcamber": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Amber malfunction indicator light"
              }
            }
          },
          "dtcprotect": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Protection malfunction indicator light"
              }
            }
          },
          "handbreak": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Handbrake malfunction indicator light"
              }
            }
          },
          "batterystatus": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "coolantstatus": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "oilpressure": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "breakpads": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataStatus"
                }
              ],
              "properties": {
                "value": {
                  "$ref": "#/components/schemas/Breakpad"
                }
              }
            }
          },
          "oillevelstatus": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "absstatus": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataStatus"
              }
            ],
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "fullyOperational",
                  "notFullyOperational"
                ]
              }
            }
          }
        }
      },
      "DriverBehavior": {
        "type": "object",
        "properties": {
          "harshbreak": {
            "type": "integer",
            "format": "int32",
            "description": "Total harsh brakes times"
          },
          "harshacc": {
            "type": "integer",
            "format": "int32",
            "description": "Total harsh accelerations times"
          },
          "idletime": {
            "type": "integer",
            "format": "int32",
            "description": "Total idle time sec."
          },
          "coastingtime": {
            "type": "integer",
            "format": "int32",
            "description": "Total coasting time sec."
          },
          "coastingdistance": {
            "type": "number",
            "format": "float",
            "description": "Total coasting distance km"
          },
          "accelerationtime": {
            "type": "integer",
            "format": "int32",
            "description": "Total acceleration time sec."
          },
          "accelerationdistance": {
            "type": "number",
            "format": "float",
            "description": "Total acceleration distance km"
          },
          "decelerationtime": {
            "type": "integer",
            "format": "int32",
            "description": "Total deceleration time sec."
          },
          "decelerationdistance": {
            "type": "number",
            "format": "float",
            "description": "Total deceleration distance km"
          },
          "overspeedtime": {
            "type": "integer",
            "format": "int32",
            "description": "Total overspeed time sec."
          },
          "overspeeddistance": {
            "type": "number",
            "format": "float",
            "description": "Total overspeed distance km"
          },
          "rpmtime": {
            "type": "integer",
            "format": "int32",
            "description": "Total over RPM time sec."
          },
          "rpmdistance": {
            "type": "number",
            "format": "float",
            "description": "Total over RPM distance km"
          },
          "cruisabletime": {
            "type": "integer",
            "format": "int32",
            "description": "Total cruisable time sec."
          },
          "cruisabledistance": {
            "type": "number",
            "format": "float",
            "description": "Total cruisable distance km"
          },
          "cruisetime": {
            "type": "integer",
            "format": "int32",
            "description": "Total cruise time sec."
          },
          "cruisedistance": {
            "type": "number",
            "format": "float",
            "description": "Total cruise distance in km"
          },
          "cruisetime2": {
            "type": "integer",
            "format": "int32",
            "description": "Total cruise time w/o acceleration pedal in sec."
          },
          "cruisedistance2": {
            "type": "number",
            "format": "float",
            "description": "Total cruise distance w/o acceleration pedal in km"
          }
        }
      },
      "Breakpad": {
        "type": "object",
        "properties": {
          "axel": {
            "type": "integer",
            "minimum": 0,
            "description": "axle number front to back beginning with 0"
          },
          "wheel": {
            "type": "string",
            "enum": [
              "left",
              "right"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "maladjusted",
              "delayedReturn",
              "delayedBreaking",
              "outworn",
              "error",
              "n/a"
            ]
          }
        }
      },
      "resource_meta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/URI"
          }
        ]
      },
      "tour_with_subresources": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Tour"
          }
        ], 
        "properties": {
          "_drives": {
            "type": "array", 
            "items" :{
              "type": "object",
              "allOf":[
                {
                  "$ref": "#/components/schemas/Drive"
                }
              ],
              "properties": {
                "_tasks": {
                  "type": "array", 
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }, 
      "tour_with_subresources_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TourFull"
          }
        ], 
        "properties": {
          "_drives": {
            "type": "array", 
            "items" :{
              "type": "object",
              "allOf":[ 
                {
                  "$ref": "#/components/schemas/DriveFull"
                }
              ],
              "properties": {
                "_tasks": {
                  "type": "array", 
                  "items": {
                    "$ref": "#/components/schemas/TaskFull"
                  }
                }
              }
            }
          }
        }
      }, 
      "TourFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          }, 
          {
            "$ref": "#/components/schemas/TourLinkFields"
          }, 
          {
            "$ref": "#/components/schemas/Tour"
          }
        ]
      },
      "TourLinkFields": {
        "type": "object", 
        "properties": {
          "drives_uri": {
            "allOf": [{"$ref": "#/components/schemas/URI"}], 
            "example": "/tours/123/drives"
          }
        }
      },
      "Tour": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "customer_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/customer_id"
              }
            ]
          },
          "device_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/device_id"
              }
            ]
          },
          "vehicle_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/vehicle_id"
              }
            ]
          }
        }
      },
      "ETA": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMeta"
          }
        ],
        "properties": {
          "drive_uri": {
            "description": "URI of the associated drive",
            "$ref": "#/components/schemas/URI", 
            "example": "/tours/123/drives/123"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "eta": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-22T17:32:28Z",
            "description": "Estimated time of arrival"
          },
          "time_window": {
            "$ref": "#/components/schemas/TimeWindow",
            "description": "Estimated time window from the given ``eta`` and confidence level"
          },
          "confidence_level": {
            "description": "Confidence level for the given ``time_window`` in percent",
            "type": "integer", 
            "minimum": 0, 
            "maximum": 100, 
            "default": 95
          }
        }
      },
      "DriveFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/DriveLinkFields"
          },
          {
            "$ref": "#/components/schemas/Drive"
          }
        ]
      }, 
      "DriveLinkFields": {
        "type": "object", 
        "properties": {
          "tasks_uri": {
            "allOf": [{"$ref": "#/components/schemas/URI"}], 
            "example": "/tours/123/drives/123/tasks"
          }
        }
      },
      "Drive": {
        "type": "object",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Destination address"
          },
          "name": {
            "type": "string"
          },
          "info": {
            "type": "string",
            "description": "Further information"
          },
          "start_timewindow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeWindow"
              }
            ],
            "description": "Earliest and latest start time"
          },
          "arrival_timewindow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeWindow"
              }
            ],
            "description": "Earliest and latest arrival time"
          },
          "avis": {
            "$ref": "#/components/schemas/Avis"
          },
          "drive_number": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the position of the drive in a tour"
          },
          "adr_totals": {
            "type": "object",
            "description": "Summarized information about the dangerous goods that are present\nduring the drive. May be different for each drive.",
            "properties": {
              "points": {
                "type": "integer",
                "format": "int32",
                "example": 1650
              },
              "tunnel_code": {
                "type": "string",
                "example": "E"
              }
            }
          }
        },
        "required": [
          "address",
          "name"
        ]
      },
      "EventMeta": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          }
        ], 
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          } 
        }
      }, 
      "AccessToken": {
        "type": "string",
        "description": "JSON Web Token"
      },
      "SubscriptionFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/Subscription"
          }
        ]
      },
      "Subscription": {
        "type": "object", 
        "properties": {
          "callback_url": {
            "type": "string", 
            "format": "url"
          },
          "access_token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "event_type":{
            "$ref": "#/components/schemas/EventType"
          },
          "uri": {
            "description": "URI structure is depending on the ``event_type``",
            "$ref": "#/components/schemas/URI", 
            "examples": [
              "/tours/123",
              "/tours/123/drives/123", 
              "/tours/123/drives/123/tasks/123",
              "/customers/123", 
              "/live-data/latest?customer_id=123?vehicle_id=123?fields=position,can,tacho", 
              "/tacho_files?customer=123", 
              "/eta/latest?tour_uri=%2Ftours%2F123"
            ]
          }
        }
      },
      "EventType": {
        "type": "string", 
        "enum": ["tour", "drive", "task", "resource", "live_data", "tacho_file", "eta"]
      },
      "TourEventTypes": {
        "description": "'available/created': Telematic -> TMS, tour fertig vorliegend",
        "type": "string", 
        "enum": [
          "available/created",
          "transmitted",
          "read",
          "excepted",
          "started",
          "canceled",
          "deleted",
          "finished",
          "denied", 
          "other"
        ]
      },
      "TourEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMeta"
          }
        ],
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "tour_uri": {
            "description": "URI of the associated tour",
            "$ref": "#/components/schemas/URI", 
            "example": "/tours/123"
          },
          "event": {
            "$ref": "#/components/schemas/TourEventTypes"
          },
          "additions": {
            "$ref": "#/components/schemas/KeyValueList"
          }
        }
      },
      "DriveEventTypes": {
        "description": "",
        "type": "string",
        "enum": [
          "started",
          "paused",
          "interrupted",
          "canceled",
          "deleted",
          "arrived",
          "finished", 
          "other"
        ]
      },
      "DriveEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMeta"
          }
        ],
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "drive_uri": {
            "description": "URI of the associated drive",
            "$ref": "#/components/schemas/URI", 
            "example": "/tours/123/drives/123"
          },
          "event": {
            "$ref": "#/components/schemas/DriveEventTypes"
          },
          "additions": {
            "$ref": "#/components/schemas/KeyValueList"
          }
        }
      },
      "TaskEventTypes": {
        "type": "string",
        "enum": [
          "started",
          "canceled",
          "finished",
          "deleted",
          "other"
        ]
      },
      "TaskEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMeta"
          }
        ],
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "task_uri": {
            "description": "URI of the associated task",
            "$ref": "#/components/schemas/URI", 
            "example": "/tours/123/drives/123/tasks/123"
          },
          "event": {
            "$ref": "#/components/schemas/TaskEventTypes"
          },
          "shipment": {
            "type": "object",
            "description": "Information about the associated shipment",
            "properties": {
              "status": {
                "type": "string"
              },
              "additions": {
                "$ref": "#/components/schemas/KeyValueList"
              }
            }
          },
          "items": {
            "description": "Information about single items.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemid": {
                  "$ref": "#/components/schemas/IDType"
                },
                "status": {
                  "description": "Information about the status of an item e.g. the condition at\ndelivery",
                  "type": "string"
                },
                "additions": {
                  "$ref": "#/components/schemas/KeyValueList"
                }
              }
            }
          },
          "additions": {
            "$ref": "#/components/schemas/KeyValueList"
          }
        }
      },
      "ResourceEventTypes": {
        "type": "string",
        "enum": [
          "updated",
          "deleted"
        ]
      },
      "ResourceEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMeta"
          }
        ], 
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ResourceEventTypes"
          },
          "resource_uri": {
            "description": "URI of the associated resource",
            "$ref": "#/components/schemas/URI", 
            "example": "/customers/123"
          },
          "additions": {
            "$ref": "#/components/schemas/KeyValueList"
          }
        }
      },
      "ShipmentFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/ShipmentLinkFields"
          },
          {
            "$ref": "#/components/schemas/Shipment"
          }
        ]
      },
      "ShipmentLinkFields": {
        "type": "object", 
        "properties": {
          "tour_links": {
            "description": "List of URIs of tours to which the shipment is linked, respectively tours with tasks linked to this shipment.",
            "type": "array", 
            "items": {
              "$ref": "#/components/schemas/URI", 
              "example": "/tours/123"
            }
          }
        }
      },
      "Shipment": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "description": "All addresses relevant for the shipment"
          },
          "items": {
            "type": "array",
            "description": "List of all single items of the shipment",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "description": "",
        "properties": {
          "itemid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IDType"
              }
            ]
          },
          "parentid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IDType"
              }
            ],
            "description": "Item ID of the package the item is part of (e.g. the ID of the\npalette to which the item belongs). With the `parentid` you are able\nto map any tree structure in the item list."
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "unit": {
            "type": "string",
            "example": "PAL"
          },
          "description": {
            "type": "string",
            "example": "Deuteriumfläschchen"
          },
          "codes": {
            "type": "array",
            "description": "List of codes on the item, e.g. barcodes",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "scanpossible": {
                  "type": "boolean",
                  "description": "If the code is scannable"
                },
                "type": {
                  "type": "string",
                  "example": "QRCode",
                  "description": "Type to distinguish between different types of codes"
                }
              }
            }
          },
          "scanrequired": {
            "type": "boolean",
            "description": "Indicates if the item must be scanned"
          },
          "dimension": {
            "type": "object",
            "properties": {
              "height": {
                "type": "number",
                "multipleOf": 0.1,
                "description": "Height in cm",
                "example": 30
              },
              "width": {
                "type": "number",
                "multipleOf": 0.1,
                "description": "Width in cm",
                "example": 80
              },
              "length": {
                "type": "number",
                "multipleOf": 0.1,
                "description": "Length in cm",
                "example": 120
              },
              "weight": {
                "type": "number",
                "multipleOf": 0.1,
                "description": "Weight in kg",
                "example": 566
              },
              "area": {
                "type": "number",
                "multipleOf": 0.1,
                "description": "Area in m2",
                "example": 0.96
              },
              "volume": {
                "type": "number",
                "format": "decimal",
                "multipleOf": 0.1,
                "example": 0.288
              },
              "cargospace": {
                "type": "number",
                "format": "decimal",
                "multipleOf": 0.1,
                "example": 1.5
              }
            }
          },
          "adrinfo": {
            "type": "object",
            "description": "Information on classification according to the 'Agreement concerning\nthe International Carriage of Dangerous Goods by Road' (ADR).\nSummarized information on the dangerous goods present on each drive\ncan be found in `Drive`",
            "properties": {
              "points": {
                "type": "integer",
                "format": "int32",
                "example": 1650
              },
              "amount": {
                "type": "integer",
                "format": "int32",
                "example": 500
              },
              "unit": {
                "type": "string",
                "example": "l",
                "enum": [
                  "l",
                  "kg"
                ]
              },
              "UNNR": {
                "type": "string",
                "example": "1905"
              },
              "properShippingName": {
                "type": "string"
              },
              "additionalDescription": {
                "type": "string"
              },
              "classNumber": {
                "type": "string",
                "example": "4.2"
              },
              "className": {
                "type": "string",
                "example": "flammable liquids"
              },
              "packingGroup": {
                "type": "string",
                "example": "II"
              },
              "classificationCode": {
                "type": "string",
                "example": "F1"
              },
              "tunnelRestrictionCode": {
                "type": "string",
                "example": "E"
              },
              "isEnvironmentallyHazardous": {
                "type": "boolean",
                "example": false
              },
              "isHighRisk": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "TaskFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/Task"
          }
        ]
      },
      "Task": {
        "type": "object",
        "properties": {
          "shipment_link": {
            "description": "URI of the shipment the task refers to",
            "$ref":  "#/components/schemas/URI", 
            "example": "/shipments/123"
          },
          "task_type": {
            "type": "string",
            "description": "Custom designation for task type"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "timewindow": {
            "$ref": "#/components/schemas/TimeWindow"
          },
          "description": {
            "type": "string"
          },
          "additions": {
            "$ref": "#/components/schemas/KeyValueList"
          }
        }
      },
      "KeyValueList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": ""
            },
            "value": {
              "type": "string"
            }
          }
        }
      },
      "TimeWindow": {
        "type": "object",
        "properties": {
          "earliest": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T09:28:00.000Z"
          },
          "latest": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T10:00:00.000Z"
          }
        }
      },
      "MessageStatus": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "serverReceived",
              "deviceReceived",
              "read",
              "delete"
            ]
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-22T17:32:28Z"
          }
        }
      },
      "MessageFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          },
          {
            "$ref": "#/components/schemas/Message"
          }
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "timestamp":{
            "$ref": "#/components/schemas/Timestamp"
          },
          "sender": {
            "type": "string",
            "description": "Name of sender"
          },
          "message_channel_id":{
            "$ref": "#/components/schemas/IDType"
          }, 
          "message": {
            "type": "string"
          }
        }
      },
      "Log": {
        "type": "object",
        "properties": {
          "loglevel": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 7,
            "description": "From 0 (most important) to 7 (least important):\n0=Emergency, 1=Alert, 2=Critical, 3=Error, 4=Warning, 5=Notice, 6=Informational, 7=Debug"
          },
          "call": {
            "type": "string",
            "description": "Which call (protocol)"
          },
          "username": {
            "type": "string",
            "description": "Which user account was it"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time of message receive",
            "example": "2017-07-21T17:32:28.000Z"
          },
          "message": {
            "type": "string",
            "description": "Log message"
          }
        }
      },
      "TachoFile": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ID"
          }, 
          {
            "$ref": "#/components/schemas/VehicleID"
          }, 
          {
            "$ref": "#/components/schemas/DriverID"
          }
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "Filename",
            "example": "123456789.DDD"
          },
          "class": {
            "type": "string",
            "enum": [
              "driver",
              "vehicle",
              "all"
            ],
            "example": "driver"
          },
          "company_card": {
            "type": "string",
            "description": "The company card which was used",
            "example": "DU000000000000"
          },
          "type": {
            "type": "string",
            "enum": [
              "ddd",
              "dlc",
              "tgd",
              "c1b_v1b"
            ],
            "example": 0
          },
          "data": {
            "type": "string",
            "description": "container data bytes encoded in Base64",
            "example": "5MCMfOGVgyZPnyxamDRjA0EAwX1BBPOQA..."
          }
        }
      },
      "DriverCard": {
        "type": "object",
        "properties": {
          "surname": {
            "type": "string",
            "example": "Mustermann"
          },
          "first_given_name": {
            "type": "string",
            "example": "Max"
          },
          "issue_date": {
            "type": "object",
            "properties": {
              "valid_from": {
                "type": "string",
                "format": "date",
                "example": "2017-07-21T00:00:00.000Z"
              },
              "valid_to": {
                "type": "string",
                "format": "date",
                "example": "2017-07-21T00:00:00.000Z"
              }
            }
          },
          "name_of_the_issuing_authority": {
            "type": "string"
          },
          "driver_license_number": {
            "type": "string",
            "example": "A1234567890"
          },
          "card_number": {
            "type": "string",
            "example": "DF00003563691000"
          }
        }
      },
      "ID": {
        "type": "object", 
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IDType"
          }
        }
      },
      "IDType": {
        "type": "string"
      },
      "URI": {
        "type": "string", 
        "format": "uri"
      },
      "URL": {
        "type": "string", 
        "format": "url"
      },
      "Cursor": {
        "type": "string"
      },
      "DataStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "error",
              "n/a"
            ],
            "description": "Indicates availability of data"
          }
        }
      },
      "Coordinates": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "WGS84 latitude"
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "WGS84 longitude"
          }
        }
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time",
        "description": "Creation time of the data set"
      },
      "device_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDType"
          },
          {
            "description": "Device ID"
          }
        ]
      },
      "DeviceID": {
        "type": "object", 
        "properties": {
          "device_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Device ID"
          }
        }
      },
      "CustomerID": {
        "type": "object", 
        "properties": {
          "customer_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Customer ID"
          }
        }
      },
      "VehicleID": {
        "type": "object", 
        "properties": {
          "vehicle_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Vehicle ID"
          }
        }
      },
      "VehicleGroupID": {
        "type": "object", 
        "properties": {
          "vehicle_group_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Vehicle ID"
          }
        }
      },
      "TourID": {
        "type": "object", 
        "properties": {
          "tour_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Tour ID"
          }
        }
      },
      "DriveID": {
        "type": "object", 
        "properties": {
          "drive_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Drive ID"
          }
        }
      },
      "DriverID": {
        "type": "object", 
        "properties": {
          "driver_id": {
            "$ref": "#/components/schemas/IDType",
            "description": "Driver ID"
          }
        }
      },
      "vehicle_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDType"
          },
          {
            "description": "Vehicle ID"
          }
        ]
      },
      "customer_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDType"
          },
          {
            "description": "Customer ID"
          }
        ]
      },
      "vehicle_group_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDType"
          },
          {
            "description": "Vehicle Group ID"
          }
        ]
      },
      "tour_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDType"
          },
          {
            "description": "Tour ID"
          }
        ]
      },
      "dataid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDType"
          },
          {
            "description": "Data ID"
          }
        ]
      }
    }
  }
}
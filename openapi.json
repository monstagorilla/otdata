{
  "openapi": "3.0.3",
  "info": {
    "version": "2.0.0",
    "title": "OTData API",
    "description": "The software-independent standard interface for the transmission of telematics data.\n\nThis is not a documentation of an existing API, it is the specification how to write a correct API according to the OTData API standard. You may only implement parts of it.\n\nThe authentication is specified by the interface operator.\n\nIt is recommended to use OAuth 2.0.",
    "contact": {
      "name": "OpenTelematics e.V.",
      "email": "info@opentelematics.io"
    },
    "license": {
          "name": "License", 
          "url": "https://gitlab.com/opentelematics/otdata/-/blob/master/LICENSE"
    }
  },
  "externalDocs": {
    "description": "Additional Documentation",
    "url": "https://opentelematics.gitlab.io/otdata/docs/"
  },
  "servers": [
    {
      "url": "{protocol}://api.{hostname}/{version}",
      "variables": {
        "hostname": {
          "default": "opentelematics.io"
        },
        "protocol": {
          "enum": ["https"],
          "default": "https"
        }, 
        "version": {
          "enum": ["2.0.0"],
          "default": "2.0.0"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Live Data", 
      "description": "Retrieve and create live data"
    },
    {
      "name": "ETA", 
      "description": "Retrieve and create ETAs"
    },
    {
      "name": "Tour Management", 
      "description": "Retrieve and manage tours and their belonging drives and tasks"
    }, 
    {
      "name": "Tacho Files", 
      "description": "Retrieve and create tacho files"
    },
    {
      "name": "Objects", 
      "description": "Retrieve and manage objects"
    },
    {
      "name": "Shipments", 
      "description": "Retrieve and manage shipments"
    },
    {
      "name": "Drivers", 
      "description": "Retrieve and manage drivers"
    },
    {
      "name": "Customers", 
      "description": "Retrieve and manage customers"
    },
    {
      "name": "Events", 
      "description": "Retrieve and create events"
    }, 
    {
      "name": "Messages", 
      "description": "Retrieve and manage channel-based messages"
    },
    {
      "name": "Webhook Subscriptions", 
      "description": "Retrieve and manage subscriptions"
    },
    {
      "name": "Webhooks", 
      "description": "All specified webhooks listed until upgrade to OAS3.1"
    }
  ],
  "paths": {
    "/live-data": {
      "post": {
        "tags": [
          "Live Data"
        ],
        "summary": "Creates a live data resource",
        "operationId": "create_live_data",
        "description": "May be used to send live data to server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/live_data_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /live-data/{live_data_id}": {
                "operationId": "get_live_data", 
                "parameters": {
                  "live_data_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/live_data_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/live-data/latest": {
      "get": {
        "summary": "Returns a list of the latest live data",
        "operationId": "get_live_data_latest",
        "tags": [
          "Live Data"
        ],
        "description": "Filter search: ``customer_uri``, ``object_uri``, ``vehicle_group_id`` and ``tour_uri``\n\nModify response: ``fields``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_uri"
          },
          {
            "$ref": "#/components/parameters/object_uri"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "name": "fields", 
            "description": "Specifies if just a selection of fields should be returned",
            "in": "query", 
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array", 
              "items": {
                "type": "string", 
                "enum": ["position", "fms", "io", "passengers", "temperatures"]
              }
            }
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/live_data_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/live-data/history": {
      "get": {
        "summary": "Returns a list of live data",
        "operationId": "get_live_data_history",
        "tags": [
          "Live Data"
        ],
        "description": "Filter search: ``customer_uri``, ``object_uri``, ``vehicle_group_id``, ``tour_uri`` and ``drive_uri``\n\nTime selection: ``from``and ``to``\n\nModify response: ``fields``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_uri"
          },
          {
            "$ref": "#/components/parameters/object_uri"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "name": "fields", 
            "description": "Specifies if just a selection of fields should be returned",
            "in": "query", 
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array", 
              "items": {
                "type": "string", 
                "enum": ["position", "io", "passengers", "temperatures", "can", "tacho", "dtc"]
              }
            }

          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/live_data_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/live-data/{live_data_id}": {
      "get": {
        "tags": [
          "Live Data"
        ],
        "operationId": "get_live_data",
        "summary": "Returns a live data resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/live_data_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/live_data_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/eta": {
      "post": {
        "tags": [
          "ETA"
        ],
        "summary": "Creates an ETA resource",
        "operationId": "create_eta",
        "description": "May be used to send calculated ETA to server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/eta_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /eta/{eta_id}": {
                "operationId": "get_eta", 
                "parameters": {
                  "eta_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eta_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/eta/latest": {
      "get": {
        "summary": "Returns a list of the latest ETAs",
        "operationId": "get_eta_latest",
        "description": "Filter search: ``tour_uri`` and ``drive_uri``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "tags": [
          "ETA"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/eta_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/eta/history": {
      "get": {
        "summary": "Returns a list of ETAs",
        "operationId": "get_eta_history",
        "description": "Filter search: ``tour_uri`` and ``drive_uri``\n\nTime selection: ``from``and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "tags": [
          "ETA"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/eta_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/eta/{eta_id}": {
      "get": {
        "tags": [
          "ETA"
        ],
        "operationId": "get_eta",
        "summary": "Returns an ETA resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/eta_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eta_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tacho-files": {
      "get": {
        "summary": "Returns a list of tacho files",
        "operationId": "get_tacho_files",
        "tags": [
          "Tacho Files"
        ],
        "description": "Filter search: ``customer_uri``, ``object_uri`` and ``vehicle_group_id``\n\nTime selection: ``from``, ``to`` and ``used_time``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_uri"
          },
          {
            "$ref": "#/components/parameters/object_uri"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "name": "used_time",
            "in": "query",
            "description": "Indicates to which time tags `from` and `to` refer: ``activity`` refers to the time the activities were stored in the tacho files, ``download`` refers to the download time of the tacho file ``data`` refers to the time stemp of the tacho files",
            "schema": {
              "type": "string",
              "enum": [
                "activity",
                "download",
                "data"
              ],
              "default": "activity"
            }
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tacho_file_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Tacho Files"
        ],
        "summary": "Creates a tacho file",
        "operationId": "create_tacho_file",
        "description": "May be used to send tacho files to server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tacho_file_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tacho-files/{tacho_file_id}": {
                "operationId": "get_tacho_file", 
                "parameters": {
                  "tacho_file_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacho_file_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tacho-files/{tacho_file_id}": {
      "get": {
        "tags": [
          "Tacho Files"
        ],
        "operationId": "get_tacho_file",
        "summary": "Returns a tacho file",
        "parameters": [
          {
            "$ref": "#/components/parameters/tacho_file_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacho_file_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/messages/{message_channel_id}": {
      "get": {
        "summary": "Returns a list of messages of a message channel",
        "operationId": "get_messages",
        "tags": [
          "Messages"
        ],
        "description": "Filter search: ``sender``\n\nTime selection: ``from``and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "name": "sender", 
            "in": "query",
            "required": false, 
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/message_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }, 
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Creates a message for a message channel",
        "operationId": "create_message",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/message"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/driver_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/messages/{message_channel_id}/{message_id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "get_message",
        "summary": "Returns a message",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "$ref": "#/components/parameters/message_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Messages"
        ],
        "operationId": "put_message",
        "summary": "Updates or creates a message",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "$ref": "#/components/parameters/message_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/message_full"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Deletes a message",
        "operationId": "delete_message",
        "parameters": [
          {
            "$ref": "#/components/parameters/message_channel_id_path"
          },
          {
            "$ref": "#/components/parameters/message_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tours": {
      "get": {
        "summary": "Returns a list of tours, optionally with embedded subresources",
        "operationId": "get_tours",
        "description": "Due to the potentially frequent need, this request allows embedding of subresources in the response. These are marked with a leading underscore and MUST NOT be cached, because no concurrency control is possible due to the missing ``ETag`` header.\n\nFilter search: ``customer_uri`` and ``object_uri``\n\nTime selection: ``from``and ``to``\n\nModify response: ``embed``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "tags": [
          "Tour Management"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_uri"
          },
          {
            "$ref": "#/components/parameters/object_uri"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/embed_required"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Depending on the value of ``embed``, subresources will be embedded",
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/tour_full"
                          }
                        }, 
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/tour_with_subresources_full"
                          }
                        }
                      ]
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Creates a tour and optionally its subresources",
        "operationId": "create_tour",
        "description": "Due to the potentially frequent need, this request allows embedding of subresources and shipments linked to the tour in the request and therefore also in the response. These are marked with a leading underscore and MUST NOT be cached, because no concurrency control is possible due to the missing ``ETag`` header.\n\nIf subresources are embedded in the response, the ``ETag`` header SHOULD not be sent. The ``ETag`` header is only related to the tour resource, not to its subresources. A response with subresources and ``ETag`` header could be misleading.\n\nModified request body: ``create_subresources``",
        "parameters": [
          {
            "$ref": "#/components/parameters/create_subresources"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tour_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tours/{tour_id}": {
                "operationId": "get_tour", 
                "parameters": {
                  "tour_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Depending on the value of ``create_subresources``, subresources will be embedded",
                  "oneOf":[
                    {
                      "$ref": "#/components/schemas/tour_full"
                    },
                    {
                      "$ref": "#/components/schemas/tour_with_subresources_full"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tours/{tour_id}": {
      "get": {
        "tags": [
          "Tour Management"
        ],
        "operationId": "get_tour",
        "summary": "Returns a tour, optionally with embedded subresources",
        "description": "Due to the potentially frequent need, this request allows embedding of subresources in the response. These are marked with a leading underscore.\n\nIf subresources are embedded in the response, the ``ETag`` header SHOULD not be sent. The ``ETag`` header is only related to the tour resource, not to its subresources. A response with subresources and ``ETag`` header could be misleading.\n\n Modify response: ``embed``",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/embed_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Depending on the value of ``embed``, subresources will be embedded",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/tour_full"
                    }, 
                    {
                      "$ref": "#/components/schemas/tour_with_subresources_full"
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Updates or creates a tour",
        "operationId": "put_tour",
        "description": "Due to the potentially frequent need, this request allows embedding of subresources and shipments. These are marked with a leading underscore. The request MAY be used to create a resource and its subresources but MUST NOT be used to update any subresources. \n\nIf the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/create_subresources"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tour_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Deletes a tour",
        "operationId": "delete_tour",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tours/{tour_id}/drives" :{
      "get": {
        "summary": "Returns a list of all drives of a tour",
        "operationId": "get_drives",
        "tags": [
          "Tour Management"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items":{
                    "$ref": "#/components/schemas/drive_full"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Creates a drive for a tour",
        "operationId": "create_drives",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/drive_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tours/{tour_id}/drives/{drive_id}": {
                "operationId": "get_drive", 
                "parameters": {
                  "drive_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drive_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tours/{tour_id}/drives/{drive_id}": {
      "get": {
        "tags": [
          "Tour Management"
        ],
        "operationId": "get_drive",
        "summary": "Returns a drive",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drive_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Updates or creates a drive",
        "operationId": "put_drive",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/drive_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Deletes a drive",
        "operationId": "delete_drive",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tours/{tour_id}/drives/{drive_id}/tasks" :{
      "get": {
        "summary": "Returns a list of all tasks of a drive",
        "operationId": "get_tasks",
        "tags": [
          "Tour Management"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items":{
                    "$ref": "#/components/schemas/task_full"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Creates a task for a drive",
        "operationId": "create_task",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/task_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tours/{tour_id}/drives/{drive_id}/tasks/{task_id}": {
                "operationId": "get_task", 
                "parameters": {
                  "task_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tours/{tour_id}/drives/{drive_id}/tasks/{task_id}": {
      "get": {
        "tags": [
          "Tour Management"
        ],
        "operationId": "get_task",
        "summary": "Returns a task",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/task_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Updates or creates a task",
        "operationId": "put_task",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/task_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/task_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Tour Management"
        ],
        "summary": "Deletes a task",
        "operationId": "delete_task",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_id_path"
          },
          {
            "$ref": "#/components/parameters/drive_id"
          },
          {
            "$ref": "#/components/parameters/task_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/objects": {
      "get": {
        "summary": "Returns a list of objects",
        "operationId": "get_objects",
        "tags": [
          "Objects"
        ],
        "description": "Filter search: ``customer_uri``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_uri"
          },
          {
            "$ref": "#/components/parameters/vehicle_group_id"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/object_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Creates an object",
        "operationId": "create_object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /objects/{object_id}": {
                "operationId": "get_object", 
                "parameters": {
                  "object_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/object_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/objects/{object_id}": {
      "get": {
        "tags": [
          "Objects"
        ],
        "operationId": "get_object",
        "summary": "Returns an object",
        "parameters": [
          {
            "$ref": "#/components/parameters/object_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/object_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Objects"
        ],
        "summary": "Updates or creates an object",
        "operationId": "put_object",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/object_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Objects"
        ],
        "summary": "Deletes an object",
        "operationId": "delete_object",
        "parameters": [
          {
            "$ref": "#/components/parameters/object_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/drivers": {
      "get": {
        "summary": "Returns a list of drivers",
        "operationId": "get_drivers",
        "tags": [
          "Drivers"
        ],
        "description": "Filter search: ``customer_uri``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_uri"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/driver_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Drivers"
        ],
        "summary": "Creates a driver",
        "operationId": "create_driver",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/driver_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /drivers/{driver_id}": {
                "operationId": "get_driver", 
                "parameters": {
                  "driver_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/driver_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/drivers/{driver_id}": {
      "get": {
        "tags": [
          "Drivers"
        ],
        "operationId": "get_driver",
        "summary": "Returns a driver",
        "parameters": [
          {
            "$ref": "#/components/parameters/driver_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/driver_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Drivers"
        ],
        "summary": "Updates or creates a driver",
        "operationId": "put_driver",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/driver_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/driver_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Drivers"
        ],
        "summary": "Deletes a driver",
        "operationId": "delete_driver",
        "parameters": [
          {
            "$ref": "#/components/parameters/driver_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Returns a list of customers",
        "operationId": "get_customers",
        "tags": [
          "Customers"
        ],
        "description": "Cursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/customer_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Creates a customer",
        "operationId": "create_customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/customer_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /customers/{customer_id}": {
                "operationId": "get_customer", 
                "parameters": {
                  "customer_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "operationId": "get_customer",
        "summary": "Returns a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "operationId": "put_customer",
        "summary": "Updates or creates a customer",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/customer_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Deletes a customer",
        "operationId": "delete_customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/customer_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/shipments": {
      "get": {
        "summary": "Returns a list of shipments",
        "operationId": "get_shipments",
        "tags": [
          "Shipments"
        ],
        "description": "Filter search: ``tour_uri``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"   
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/shipment_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Shipments"
        ],
        "summary": "Creates a shipment",
        "operationId": "create_shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/shipment_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /shipments/{shipment_id}": {
                "operationId": "get_shipment", 
                "parameters": {
                  "shipment_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/shipments/{shipment_id}": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "operationId": "get_shipment",
        "summary": "Returns a shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/shipment_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Shipments"
        ],
        "summary": "Updates or creates a shipment",
        "operationId": "put_shipment",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/shipment_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/shipment_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Shipments"
        ],
        "summary": "Deletes a shipment",
        "operationId": "delete_shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/shipment_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tour-events": {
      "get": {
        "summary": "Returns a list of tour events",
        "operationId": "get_tour_events",
        "tags": [
          "Events"
        ],
        "description": "Filter search: ``tour_uri`` and ``tour_event``\n\nTime selection: ``from``and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/tour_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tour_event_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Creates a tour event",
        "operationId": "create_tour_event",
        "description": "May be used to send tour event to server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tour_event_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /tour-events/{tour_event_id}": {
                "operationId": "get_tour_event", 
                "parameters": {
                  "tour_event_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tour_event_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/tour-events/{tour_event_id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "get_tour_event",
        "summary": "Returns a tour event",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tour_event_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/drive-events": {
      "get": {
        "summary": "Returns a list of drive events",
        "operationId": "get_drive_events",
        "tags": [
          "Events"
        ],
        "description": "Filter search: ``tour_uri``, ``drive_uri`` and ``drive_event``\n\nTime selection: ``from``and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/drive_event_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Creates a drive event",
        "operationId": "create_drive_event",
        "description": "May be used to send drive event to server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/drive_event_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /drive-events/{drive_event_id}": {
                "operationId": "get_drive_event", 
                "parameters": {
                  "drive_event_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drive_event_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/drive-events/{drive_event_id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "get_drive_event",
        "summary": "Returns a drive event",
        "parameters": [
          {
            "$ref": "#/components/parameters/drive_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drive_event_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/task-events": {
      "get": {
        "summary": "Returns a list of task events",
        "operationId": "get_task_events",
        "tags": [
          "Events"
        ],
        "description": "Filter search: ``tour_uri``, ``drive_uri``, ``task_uri`` and ``task_event``\n\nTime selection: ``from``and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/tour_uri_query"
          },
          {
            "$ref": "#/components/parameters/drive_uri_query"
          },
          {
            "$ref": "#/components/parameters/task_uri_query"
          },
          {
            "$ref": "#/components/parameters/task_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/task_event_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Creates a task event",
        "operationId": "create_task_event",
        "description": "May be used to send task event to server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/task_event_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /task-events/{task_event_id}": {
                "operationId": "get_task_event", 
                "parameters": {
                  "task_event_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_event_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/task-events/{task_event_id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "get_task_event",
        "summary": "Returns a task event",
        "parameters": [
          {
            "$ref": "#/components/parameters/task_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_event_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/resource-events": {
      "get": {
        "summary": "Returns a list of resource events",
        "operationId": "get_resource_events",
        "tags": [
          "Events"
        ],
        "description": "Filter search: ``resource_uri`` and ``resource_event``\n\nTime selection: ``from``and ``to``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource_uri_query"
          },
          {
            "$ref": "#/components/parameters/resource_event_query"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/resource_event"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/resource-events/{resource_event_id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "get_resource_event",
        "summary": "Returns a resource event",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource_event_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resource_event"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/tour-event": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a tour event",
        "operationId": "webhook_tour_event",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tour_event"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/drive-event": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a drive event",
        "operationId": "webhook_drive_event",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/drive_event"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/task-event": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a task event",
        "operationId": "webhook_task_event",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/task_event"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/resource-event": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a resource event",
        "operationId": "webhook_resource_event",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/resource_event"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/live-data": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a set of live data",
        "operationId": "webhook_live_data",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/live_data"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/tacho-file": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a tacho file",
        "operationId": "webhook_tacho_file",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/tacho_file"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/eta": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends an ETA",
        "operationId": "webhook_eta",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/eta"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/webhooks/message": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a message",
        "operationId": "webhook_message",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/message_full"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/subscriptions":{
      "get": {
        "summary": "Returns a list of subscriptions",
        "operationId": "get_subscriptions",
        "tags": [
          "Webhook Subscriptions"
        ],
        "description": "Filter search: ``callback_url`` and ``topics``\n\nCursor-based pagination: ``cursor`` and ``limit``",
        "parameters": [
          {
            "$ref": "#/components/parameters/callback_url"
          },
          {
            "$ref": "#/components/parameters/topics"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subscription_full"
                      }
                    },
                    "next_cursor":{
                      "$ref": "#/components/schemas/cursor"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "post": {
        "tags": [
          "Webhook Subscriptions"
        ],
        "summary": "Creates a subscription",
        "operationId": "create_subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/subscription_create"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "links": {
              "GET /subscriptions/{subscription_id}": {
                "operationId": "get_subscription", 
                "parameters": {
                  "subscription_id": "$response.body#/id"
                }
              }
            },
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_full"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    },
    "/subscriptions/{subscription_id}": {
      "get": {
        "tags": [
          "Webhook Subscriptions"
        ],
        "operationId": "get_subscription",
        "summary": "Returns a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id_path"
          },
          {
            "$ref": "#/components/parameters/if_none_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "$ref": "#/components/headers/etag"
              }, 
              "Cache-Control": {
                "$ref": "#/components/headers/cache_control"
              },
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_full"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Webhook Subscriptions"
        ],
        "summary": "Updates or creates a subscription",
        "operationId": "put_subscription",
        "description": "If the request is used to create a new resource, the ``If_Match`` header SHOULD be omitted. If it is used to update an existing resource, the ``If-Match`` header MUST be send.",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/subscription_update"
        },
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled and has resulted in one or more new resources being created.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "204": {
            "description": "No Content.",
            "headers": {
              "api-version": {
                "$ref": "#/components/headers/api_version"
              }, 
              "OT-ID": {
                "$ref": "#/components/headers/ot_id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "415": {
            "$ref": "#/components/responses/unsupported_media_type"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook Subscriptions"
        ],
        "summary": "Deletes a subscription",
        "operationId": "delete_subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id_path"
          },
          {
            "$ref": "#/components/parameters/if_match_required"
          },
          {
            "$ref": "#/components/parameters/ot_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          },
          {
            "$ref": "#/components/parameters/api_version"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "428": {
            "$ref": "#/components/responses/precondition_required"
          },
          "500": {
            "$ref": "#/components/responses/internal_server_error"
          }, 
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        }
      }
    }
  },
  "components": {
    "examples": {
      "event_uris": {
        "value": [
          "/tours/123",
          "/tours/123/drives/123", 
          "/tours/123/drives/123/tasks/123",
          "/customers/123", 
          "/live-data/latest?customer_uri=/customers/123?object_uri=/objects/123?fields=position,can,tacho", 
          "/tacho_files?customer_uri=/customers/123", 
          "/eta/latest?tour_uri=/tours/123", 
          "/messages/123"
        ]
      },
      "tour_uri": {
        "value": {
          "uri": "/tours/123"
        }
      },
      "drive_uri": {
        "value": "/tours/123/drives/123"
      },
      "tasks_uri": {
        "value": "/tours/123/drives/123/tasks"
      },
      "task_uri": {
        "value": "/tours/123/drives/123/tasks/123"
      },
      "shipment_uri": {
        "value": "/shipments/123"
      },
      "customer_uri": {
        "value": "/customers/123"
      },
      "driver_uri": {
        "value": "/drivers/123"
      },
      "object_uri": {
        "value": "/objects/123"
      },
      "message_uri": {
        "value": "/messages/123/123"
      },
      "tour_event_uri": {
        "value": "/tour-events/123"
      },
      "drive_event_uri": {
        "value": "/drive-events/123"
      },
      "task_event_uri": {
        "value": "/task-events/123"
      },
      "resource_event_uri": {
        "value": "/resource-events/123"
      }, 
      "tacho_file_uri": {
        "value": "/tacho-files/123"
      }, 
      "live_data_uri": {
        "value": "/live-data/123"
      }, 
      "eta_uri": {
        "value": "/eta/123"
      }, 
      "subscription_uri": {
        "value": "/subscriptions/123"
      }
    },
    "headers": {
      "etag": {
        "description": "Entity Tag as defined by [RFC2068](https://datatracker.ietf.org/doc/html/rfc2068#section-14.20)",
        "schema": {
          "type": "string"
        }, 
        "required": true
      },
      "cache_control": {
        "description": "Header as defined by [RFC7234](https://datatracker.ietf.org/doc/html/rfc7234#section-5.2)",
        "schema": {
          "type": "string"
        }, 
        "required": true
      },
      "ot_id": {
        "description": "Registered OpenTelematics ID of the responder",
        "schema": {
          "type": "string"
        }, 
        "required": false
      },
      "api_version": {
        "description": "Version of the OpenTelematics API used, e.g.:`\"2.0.0\"`",
        "schema": {
          "type": "string",
          "pattern": "^[1-9][0-9]*\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)$"
        }, 
        "required": false
      }
    },
    "parameters": {
      "access_token": {
        "name": "Access-Token",
        "in": "header",
        "description": "JSON Web Token",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/access_token"
        }
      },
      "api_version": {
        "in": "header",
        "name": "API-Version",
        "description": "Version of the OpenTelematics API used, e.g.:`\"2.0.0\"`",
        "schema": {
          "type": "string",
          "pattern": "^[1-9][0-9]*\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)$"
        }
      },
      "from": {
        "name": "from",
        "in": "query",
        "description": "Only data from this point on are returned",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "to": {
        "name": "to",
        "in": "query",
        "description": "Only data up to this point in time are returned",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "callback_url":{
        "name": "callback_url", 
        "in": "query", 
        "schema": {
          "$ref":  "#/components/schemas/url_type"
        }, 
        "required": false
      },
      "topics": {
        "in": "query",
        "name": "topics", 
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array", 
          "items":{
            "$ref": "#/components/schemas/topic"
          }          
        }
      },
      "tour_event_id_path":{
        "name": "tour_event_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "drive_event_id_path":{
        "name": "drive_event_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "task_event_id_path":{
        "name": "task_event_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "resource_event_id_path":{
        "name": "resource_event_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "subscription_id_path": {
        "name": "subscription_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "message_id_path": {
        "name": "message_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "message_channel_id_path": {
        "name": "message_channel_id", 
        "in": "path", 
        "required": true,  
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "ot_id": {
        "in": "header",
        "name": "OT-ID",
        "description": "Registered OpenTelematics ID of the requester",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "customer_uri": {
        "name": "customer_uri",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/uri_type"
        }
      },
      "customer_id_path": {
        "name": "customer_id",
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }, 
        "required": true
      },
      "vehicle_group_id": {
        "name": "vehicle_group_id",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "object_uri": {
        "name": "object_uri",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/uri_type"
        }
      },
      "driver_id_path": {
        "name": "driver_id",
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/id_type"
        },
        "required": true
      },
      "object_id_path": {
        "name": "object_id",
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/id_type"
        },
        "required": true
      },
      "cursor": {
        "name": "cursor",
        "in": "query",
        "required": false,
        "description": "Cursor for cursor-based pagination. Use ``next_cursor`` from response body to get the next page.",
        "schema": {
          "$ref": "#/components/schemas/cursor"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "The limit parameter sets a maximum number of results to return per call.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 30
        }
      },
      "embed_required": {
        "name": "embed",
        "in": "query",
        "required": true,
        "description": "Whether to embed subresources and shipments linked with the tour in the response.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "live_data_id_path": {
        "name": "live_data_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "eta_id_path": {
        "name": "eta_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "tour_id_path": {
        "name": "tour_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "tour_uri_query": {
        "name": "tour_uri", 
        "in": "query", 
        "required": false, 
        "schema": {
          "$ref": "#/components/schemas/uri_type"
        }
      },
      "drive_id": {
        "name": "drive_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "drive_uri_query": {
        "name": "drive_uri", 
        "in": "query", 
        "required": false, 
        "schema": {
          "$ref": "#/components/schemas/uri_type"
        }
      },
      "task_id_path": {
        "name": "task_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "shipment_id_path": {
        "name": "shipment_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "tacho_file_id_path": {
        "name": "tacho_file_id", 
        "in": "path", 
        "required": true, 
        "schema": {
          "$ref": "#/components/schemas/id_type"
        }
      },
      "if_none_match": {
        "in": "header",
        "name": "If-None-Match",
        "description": "Newest known entity tag of the resource as defined by [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232#section-3.2)",
        "schema": {
          "type": "string"
        }, 
        "required": false
      },
      "if_match": {
        "in": "header",
        "name": "If-Match",
        "description": "Newest known entity tag of the resource as defined by [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232#section-3.1)",
        "schema": {
          "type": "string"
        }, 
        "required": false
      },
      "if_match_required": {
        "in": "header",
        "name": "If-Match",
        "description": "Newest known entity tag of the resource as defined by [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232#section-3.1)",
        "schema": {
          "type": "string"
        }, 
        "required": true
      },
      "task_uri_query": {
        "name": "task_uri", 
        "in": "query", 
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/uri_type"
        }
      },
      "resource_uri_query": {
        "name": "resource_uri", 
        "in": "query", 
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/uri_type"
        }
      }, 
      "tour_event_query": {
        "name": "tour_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the tour event",
        "schema": {
          "$ref": "#/components/schemas/tour_event_types"
        }
      },
      "drive_event_query": {
        "name": "drive_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the drive event",
        "schema": {
          "$ref": "#/components/schemas/drive_event_types"
        }
      },
      "task_event_query": {
        "name": "task_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the task event",
        "schema": {
          "$ref": "#/components/schemas/task_event_types"
        }
      },
      "resource_event_query": {
        "name": "resource_event", 
        "in": "query", 
        "required": false, 
        "description": "Type of the resource event",
        "schema": {
          "$ref": "#/components/schemas/resource_event_types"
        }
      }, 
      "create_subresources": {
        "name": "create_subresources", 
        "in": "query", 
        "required": true, 
        "description": "Whether also subresources and shipments linked to the tour should be created.",
        "schema": {
          "type": "boolean", 
          "default": false
        }
      }
    },
    "responses": {
      "no_content": {
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "description": "No Content. The server has successfully fulfilled the request and there is no additional content to return in the response payload body"
      },
      "not_modified": {
        "description": "Not Modified. The resource has not been modified since the version specified by the request header If-None-Match.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        }
      },
      "bad_request": {
        "description": "Bad Request. The server cannot or will not process the request, due to a client error.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "unauthorized": {
        "description": "Unauthorized. The request requires user authentication.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "forbidden": {
        "description": "Forbidden. The server understood the request, but refuses to authorize\nit.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "not_found": {
        "description": "Not Found. The server has not found anything matching the effective\nrequest URI.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "precondition_failed": {
        "description": "Precondition Failed. One or more conditions (e.g. If-None-Match header) given in the request header fields evaluated to false when tested on the server.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "unsupported_media_type": {
        "description": "Unsupported Media Type. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "precondition_required": {
        "description": "Precondition Required. The origin server requires the request to be conditional.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      },
      "internal_server_error": {
        "description": "Internal Server Error. The server encountered an unexpected condition\nwhich prevented it from fulfilling the request.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      }, 
      "service_unavailable": {
        "description": "Service Unavailable. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/api_version"
          }, 
          "OT-ID": {
            "$ref": "#/components/headers/ot_id"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/problem_details"  
            }
          }
        }
      }
    },
    "requestBodies": {
      "live_data_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/live_data"
            }
          }
        },
        "required": true
      },
      "tour_create": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Depending on the value of ``create_subresources``, subresources will be embedded in the body",
              "oneOf":[
                {
                  "$ref": "#/components/schemas/tour"
                }, 
                {
                  "$ref": "#/components/schemas/tour_with_subresources"  
                }
              ]
            }
          }
        },
        "required": true
      }, 
      "tour_update": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Depending on the value of ``create_subresources``, subresources will be embedded in the body",
              "oneOf":[
                {
                  "$ref": "#/components/schemas/tour_full"
                }, 
                {
                  "$ref": "#/components/schemas/tour_with_subresources_full"  
                }
              ]
            }
          }
        },
        "required": true
      },
      "drive_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/drive"
            }
          }
        },
        "required": true
      },
      "drive_update": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/drive_full"
            }
          }
        },
        "required": true
      },
      "task_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/task"
            }
          }
        },
        "required": true
      },
      "task_update": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/task_full"
            }
          }
        },
        "required": true
      },
      "shipment_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/shipment"
            }
          }
        },
        "required": true
      },
      "shipment_update": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/shipment_full"
            }
          }
        },
        "required": true
      },
      "object_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object"
            }
          }
        },
        "required": true
      },
      "object_update": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object_full"
            }
          }
        },
        "required": true
      },
      "driver_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/driver"
            }
          }
        },
        "required": true
      },
      "driver_update": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/driver_full"
            }
          }
        },
        "required": true
      }, 
      "customer_create": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customer"
            }
          }
        },
        "required": true
      },
      "customer_update": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customer_full"
            }
          }
        },
        "required": true
      }, 
      "subscription_create": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            }
          }
        }
      },
      "subscription_update": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription_full"
            }
          }
        }
      }, 
      "tour_event":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tour_event_full"
            }
          }
        }
      },
      "tour_event_create":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tour_event"
            }
          }
        }
      },
      "drive_event":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/drive_event_full"
            }
          }
        }
      },
      "drive_event_create":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/drive_event"
            }
          }
        }
      },
      "task_event":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/task_event_full"
            }
          }
        }
      },
      "task_event_create":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/task_event"
            }
          }
        }
      },
      "resource_event":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/resource_event"
            }
          }
        }
      }, 
      "live_data":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/live_data_full"
            }
          }
        }
      },
      "tacho_file":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tacho_file_full"
            }
          }
        }
      },
      "tacho_file_create":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/tacho_file"
            }
          }
        }
      },
      "eta":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/eta_full"
            }
          }
        }
      }, 
      "eta_create":  {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/eta"
            }
          }
        }
      }, 
      "message": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/message"
            }
          }
        }
      }, 
      "message_full": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/message_full"
            }
          }
        }
      }
    },
    "schemas": {
      "problem_details": {
        "type": "object",
        "description": "Problem details as defined by [RFC7807](https://datatracker.ietf.org/doc/html/rfc7807)",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri-reference",
            "description": "A URI reference that uniquely identifies the problem type only in the context of the provided API. Opposed to the specification in RFC-7807, it is neither recommended to be dereferencable and point to a human-readable documentation nor globally unique for the problem type.",
            "default": "about:blank",
            "example": "/problem/connection-error"
          },
          "title": {
            "type": "string",
            "description": "A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\n",
            "example": "Internal Server Error."
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code generated by the origin server for this occurrence of the problem.",
            "minimum": 100,
            "maximum": 600,
            "exclusiveMaximum": true,
            "example": 500
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.",
            "example": "Connection to database timed out"
          },
          "instance": {
            "type": "string",
            "format": "uri-reference",
            "description": "A URI reference that identifies the specific occurrence of the problem, e.g. by adding a fragment identifier or sub-path to the problem type. May be used to locate the root of this problem in the source code.",
            "example": "/problem/connection-error#token-info-read-timed-out"
          }
        }
      },
      "object_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          }, 
          {
            "$ref": "#/components/schemas/object"
          }
        ]
      },
      "object": {
        "allOf": [
          {
            "$ref": "#/components/schemas/customer_uri"
          },
          {
            "type": "object", 
            "description": "An object contains information about e.g. a vehicle or/and a device which can be linked to e.g. live data sets. The data structure is very broad to allow use in very different contexts.",
            "properties": {
              "device": {
                "type":"object",
                "properties":{
                  "imei": {
                    "type": "string",
                    "minLength": 15,
                    "maxLength": 15,
                    "description": "IMEI"
                  },
                  "sn": {
                    "type": "string",
                    "maxLength": 30,
                    "description": "Serial number"
                  }
                }
              }, 
              "vehicle": {
                "type": "object",
                "properties": {
                  "vehicle_groups": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/vehicle_group_id"
                    },
                    "description": "List of assigned vehicle groups"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 150,
                    "description": "Name of vehicle",
                    "example": "MH-MH 1"
                  },
                  "plate_number": {
                    "type": "string",
                    "maxLength": 150,
                    "description": "Plate number of vehicle",
                    "example": "MH-MH 1"
                  },
                  "manufacturer": {
                    "type": "string",
                    "maxLength": 150,
                    "description": "Manufacturer",
                    "example": "Mercedes-Benz"
                  },
                  "model": {
                    "type": "string",
                    "maxLength": 150,
                    "description": "Model type",
                    "example": "1844 LS"
                  },
                  "construction_year": {
                    "type": "integer",
                    "description": "Building Year",
                    "example": 2008
                  },
                  "vin": {
                    "type": "string",
                    "minLength": 17,
                    "maxLength": 17,
                    "pattern": "^[A-HJ-NPR-Z0-9]{13}[0-9]{4}$",
                    "description": "Vehicle identification number",
                    "example": "WDB9340321L333168"
                  }        
                }
              }
            }
          }
        ]
      },
      "live_data_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          }, 
          {
            "$ref": "#/components/schemas/live_data"
          }
        ]
      },
      "live_data": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          },
          {
            "$ref": "#/components/schemas/object_uri"
          },
          {
            "$ref": "#/components/schemas/vehicle_group_id"
          },
          {
            "$ref": "#/components/schemas/customer_uri"
          },
          {
            "$ref": "#/components/schemas/drive_uri"
          }, 
          {
            "type": "object",
            "properties": {
              "driver_uri": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/uri_type"
                  },
                  {
                    "description": "Driver URI of the driver", 
                    "example": "/drivers/123"
                  } 
                ]
                 
              },
              "co_driver_uri": {
                "allOf":[
                  {
                    "$ref": "#/components/schemas/uri_type" 

                  },
                  {
                    "description": "Driver URI of the co-driver", 
                    "example": "/drivers/123"
                  }
                ]
              },
              "position": {
                "$ref": "#/components/schemas/position"
              },
              "fms": {
                "$ref": "#/components/schemas/fms"
              },
              "io": {
                "$ref": "#/components/schemas/io"
              },
              "passengers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/passenger"
                }
              },
              "temperatures": {
                "$ref": "#/components/schemas/temperatures"
              }
            }
          }
        ]
      },
      "io": {
        "type": "array", 
        "description": "Generic list for IO data, e.g. sensors.",
        "items": {
          "type": "object",  
          "properties": {
            "name": {
              "type": "string",
              "description": "Unique name of the data set."
            }, 
            "value": {
              "oneOf":[ 
                {
                  "type": "string"
                }, 
                {
                  "type": "number"
                }, 
                {
                  "type": "boolean"
                }
              ], 
              "description": "The value in one of the specified types."
            }
          }
        }
      },
      "position": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "type": "object", 
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/coordinates"
              },
              "heading": {
                "type": "integer",
                "description": "Direction in degrees (0-360)"
              },
              "speed": {
                "type": "number",
                "format": "float",
                "description": "Speed in km/h"
              },
              "altitude": {
                "type": "integer",
                "description": "Altitude in m"
              },
              "accuracy": {
                "type": "integer",
                "description": "Accuracy in m"
              },
              "characteristic": {
                "type": "string",
                "enum": [
                  "satellite",
                  "gsm",
                  "indirect"
                ],
                "description": "`satellite`: GPS, Galileo, GLONASS etc.\n`indirect`: Bluetooth, Wi-Fi etc."
              }, 
              "satellite_count": {
                "type": "integer", 
                "description": "Number of satellites to estimate accuracy"
              }
            },
            "required": [
              "timestamp",
              "coordinates"
            ]
          }
        ]
      },
      "customer_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/customer"
          }
        ]
      },
      "customer": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "driver_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/driver"
          },
          {
            "type": "object",
            "properties": {
              "drives": {
                "type": "array",
                "description": "Drives assigned to the driver",
                "items": {
                  "$ref": "#/components/schemas/drive_uri"
                }
              }
            }
          }
        ]
      },
      "driver": {
        "allOf": [
          {
            "$ref": "#/components/schemas/customer_uri"
          }, 
          {
            "type": "object",
            "properties": {
              "driver_card": {
                "$ref": "#/components/schemas/driver_card"
              }
            }    
          }
        ]
      },
      "passenger": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/id_type"
              }, 
              {
                "description": "Passenger ID"
              }
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "description": "Passenger name"
          }
        }
      },
      "temperatures": {
        "type": "array", 
        "items": {
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "Name of the temperature sensor"
            },
            "temperature": {
              "type": "number",
              "description": "Measured temperature in °C"
            }
          }
        }
      },
      "address": {
        "type": "object",
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/coordinates"
          },
          "address_type": {
            "type": "string",
            "enum": [
              "customer",
              "personal",
              "invoice",
              "shipper",
              "consignee",
              "shipping_partner",
              "receiving_partner",
              "forwarder",
              "service", 
              "other"
            ],
            "description": "Type to distinguish between different types of addresses, so that\nyou can have several addresses in one list"
          },
          "name": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "Street name and possibly number"
          },
          "addition": {
            "type": "string",
            "description": "Further address information or additional details"
          },
          "province": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip_code": {
            "description": "zip code or postal code",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country_code": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "pattern": "^[A-Z]{3}$",
            "description": "ISO-3166 ALPHA-3"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "poi_name": {
            "type": "string",
            "maxLength": 30
          },
          "poi_group": {
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "avis": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Hr Max Muster"
          },
          "phone": {
            "type": "string",
            "example": "+41793332211"
          },
          "is_mandatory": {
            "type": "boolean",
            "description": "Indicates if it is mandatory to notify",
            "example": true
          }
        }
      },
      "contact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "maxLength": 30
          },
          "fax": {
            "type": "string",
            "maxLength": 30
          },
          "mobile": {
            "type": "string",
            "maxLength": 30
          },
          "email": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "dtc": {
        "type": "object",
        "properties": {
          "dtc_status": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Generic malfunction indicator light"
              }
            }   
          },
          "dtc_red": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Red malfunction indicator light"
              }
            }
          },
          "dtc_amber": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Amber malfunction indicator light"
              }
            }
          },
          "dtc_protect": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Protection malfunction indicator light"
              }
            }   
          },
          "handbreak": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "off",
                  "on"
                ],
                "description": "Handbrake malfunction indicator light"
              }
            }
          },
          "battery_status": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "coolant_status": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "oil_pressure": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "break_pads": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "$ref": "#/components/schemas/breakpad"
                }
              }
            }
          },
          "oil_level_status": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "ok",
                  "failure"
                ]
              }
            }
          },
          "abs_status": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "fullyOperational",
                  "notFullyOperational"
                ]
              }
            }    
          }
        }
      },
      "resource_meta": {
        "type": "object",
        "required": ["id", "uri"],
        "allOf": [
          {
            "$ref": "#/components/schemas/id"
          },
          {
            "$ref": "#/components/schemas/uri"
          }
        ]
      },
      "tour_with_subresources": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/tour"
          },
          {
            "type": "object", 
            "properties": {
              "_drives": {
                "type": "array", 
                "items" :{
                  "allOf":[
                    {
                      "$ref": "#/components/schemas/drive"
                    }, 
                    {
                      "type": "object", 
                      "properties": {
                        "_tasks":{
                          "type": "array", 
                          "items": {
                            "$ref": "#/components/schemas/task"
                          }
                        }
                      }
                    }
                  
                  ]
                }
              }, 
              "_shipments": {
                "type": "array",
                "items" :{
                  "$ref": "#/components/schemas/shipment"
                }
              }
            }    
          }
        ]
      }, 
      "tour_with_subresources_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/tour_full"
          },
          {
            "type": "object", 
            "properties": {
              "_drives": {
                "type": "array", 
                "items" :{
                  "allOf":[
                    {
                      "$ref": "#/components/schemas/drive_full"
                    }, 
                    {
                      "type": "object", 
                      "properties": {
                        "_tasks":{
                          "type": "array", 
                          "items": {
                            "$ref": "#/components/schemas/task_full"
                          }
                        }
                      }
                    }
                  ]
                }
              }, 
              "_shipments": {
                "type": "array",
                "items" :{
                  "$ref": "#/components/schemas/shipment_full"
                }
              }
            }    
          }
        ]
      }, 
      "tour_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          }, 
          {
            "$ref": "#/components/schemas/tour"
          }, 
          {
            "type": "object",
            "properties": {
              "drives_uri": {
                "allOf": [{"$ref": "#/components/schemas/uri"}], 
                "example": "/tours/123/drives"
              }
            }    
          }
        ]
      },
      "tour": {
        "allOf": [
          {
            "$ref": "#/components/schemas/customer_uri"
          },
          {
            "$ref": "#/components/schemas/object_uri"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "info": {
                "type": "string"
              },
              "additions": {
                "$ref": "#/components/schemas/key_value_list"
              }
            }    
          }
        ]
      },
      "eta_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          }, 
          {
            "$ref": "#/components/schemas/eta"
          }
        ]
      },
      "eta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "$ref": "#/components/schemas/drive_uri"
          }, 
          {
            "type": "object", 
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/coordinates"
              },
              "eta": {
                "type": "string",
                "format": "date-time",
                "example": "2017-07-22T17:32:28Z",
                "description": "Estimated time of arrival"
              },
              "time_window": {
                "allOf":[
                  {
                    "$ref": "#/components/schemas/time_window"
                  },
                  {
                    "description": "Estimated time window from the given ``eta`` and confidence level"
                  }
                ]
              },
              "confidence_level": {
                "description": "Confidence level for the given ``time_window`` in percent",
                "type": "integer", 
                "minimum": 0, 
                "maximum": 100, 
                "default": 95
              }
            }    
          }
        ]
      },
      "drive_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/drive"
          },
          {
            "type": "object", 
            "properties": {
              "tasks_uri": {
                "allOf":[
                  {
                    "$ref": "#/components/schemas/uri_type"
                  }, 
                  {
                    "example": "/tours/123/drives/123/tasks"
                  }
                ]
              }
            }
          }
        ]
      },
      "drive": {
        "type": "object",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              }, 
              {
                "description": "Destination address"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "info": {
            "type": "string",
            "description": "Further information"
          },
          "start_time_window": {
            "allOf": [
              {
                "$ref": "#/components/schemas/time_window"
              }, 
              {
                "description": "Earliest and latest start time"
              }
            ]
          },
          "arrival_time_window": {
            "allOf": [
              {
                "$ref": "#/components/schemas/time_window"
              }, 
              {
                "description": "Earliest and latest arrival time"
              }
            ]
          },
          "driver_uri": {
            "allOf": [
              {
                "$ref": "#/components/schemas/uri_type"
              }, 
              {
                "description": "Driver URI of the driver", 
                "example": "/drivers/123"
              }
            ]
          },
          "co_driver_uri": {
            "allOf": [
              {
                "$ref": "#/components/schemas/uri_type" 
              },
              {
                "description": "Driver URI of the co-driver", 
                "example": "/drivers/123"
              }
            ]
          },
          "avis": {
            "$ref": "#/components/schemas/avis"
          },
          "drive_number": {
            "type": "integer",
            "description": "Indicates the position of the drive in a tour"
          },
          "adr_totals": {
            "type": "object",
            "description": "Summarized information about the dangerous goods that are present\nduring the drive. May be different for each drive.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 1650
              },
              "tunnel_code": {
                "type": "string",
                "example": "E"
              }
            }
          },
          "additions": {
            "$ref": "#/components/schemas/key_value_list"
          }
        },
        "required": [
          "address",
          "name"
        ]
      },
      "access_token": {
        "type": "string",
        "description": "JSON Web Token"
      },
      "subscription_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/subscription"
          }
        ]
      },
      "subscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "type": "object", 
            "properties": {
              "callback_url": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url_type"
                  },
                  {
                    "description":  "URL to which webhooks should send requests"
                  }
                ]
              },
              "access_token": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/access_token"
                  },
                  {
                    "description": "JSON Web Token for authentication at callback server"
                  }
                ]
              },
              "topic":{
                "$ref": "#/components/schemas/topic"
              },
              "event_uri": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/uri_type"
                  },
                  {
                    "description": "URI structure is depending on the ``topic``"
                  }
                ]
              }, 
              "expiration_time": {
                "type": "string", 
                "description": "Expiration time to limit the lifetime and avoid obsolete subscriptions",
                "format": "date-time"
              }
            }    
          }
        ]
      },
      "topic": {
        "type": "string", 
        "description": "Distinguishes between different topics that can be subscribed to",
        "enum": ["tour_event", "drive_event", "task_event", "resource_event", "live_data", "tacho_file", "eta", "message"]
      },
      "tour_event_types": {
        "description": "``transmitted``: tour transmitted to e.g. driver, device or vehicle, \n``read``: tour read by driver, \n``excepted``: tour excepted by driver, \n``denied``: tour denied by driver, \n``started``: tour started, \n``canceled``: tour canceled, \n``deleted``: tour deleted, \n``finished``: tour finished",
        "type": "string", 
        "enum": [
          "transmitted",
          "read",
          "excepted",
          "denied", 
          "started",
          "canceled",
          "deleted",
          "finished",
          "other"
        ]
      },
      "tour_event_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/tour_event"
          }
        ]
      },
      "tour_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "$ref": "#/components/schemas/tour_uri"
          }, 
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/coordinates"
              },
              "event": {
                "$ref": "#/components/schemas/tour_event_types"
              },
              "additions": {
                "$ref": "#/components/schemas/key_value_list"
              }
            }    
          }
        ]
      },
      "drive_event_types": {
        "description": "``started``: drive started, \n``paused``: drive paused, \n``interrupted``: drive interrupted due to an unplanned event e.g. accident, \n``canceled``: drive canceled, \n``deleted``: drive deleted, \n``arrived``: arrived at destination, \n``finished``: drive and including tasks finished",
        "type": "string",
        "enum": [
          "started",
          "paused",
          "interrupted",
          "canceled",
          "deleted",
          "arrived",
          "finished", 
          "other"
        ]
      },
      "drive_event_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/drive_event"
          }
        ]
      },
      "drive_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "$ref": "#/components/schemas/drive_uri"
          }, 
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/coordinates"
              },
              "event": {
                "$ref": "#/components/schemas/drive_event_types"
              },
              "additions": {
                "$ref": "#/components/schemas/key_value_list"
              }
            }    
          }
        ]
      },
      "task_event_types": {
        "type": "string",
        "enum": [
          "started",
          "canceled",
          "finished",
          "deleted",
          "other"
        ]
      },
      "task_event_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/task_event"
          }
        ]
      },
      "task_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "$ref": "#/components/schemas/task_uri"
          }, 
          {
            "type": "object",
            "properties": {
              "coordinates": {
                "$ref": "#/components/schemas/coordinates"
              },
              "event": {
                "$ref": "#/components/schemas/task_event_types"
              },
              "shipment_info": {
                "type": "object",
                "description": "Information about the associated shipment",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "additions": {
                    "$ref": "#/components/schemas/key_value_list"
                  }
                }
              },
              "items_info": {
                "description": "Information about single items.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "item_id": {
                      "$ref": "#/components/schemas/id_type"
                    },
                    "status": {
                      "description": "Information about the status of an item e.g. the condition at\ndelivery",
                      "type": "string"
                    },
                    "additions": {
                      "$ref": "#/components/schemas/key_value_list"
                    }
                  }
                }
              },
              "additions": {
                "$ref": "#/components/schemas/key_value_list"
              }
            }    
          }
        ]
      },
      "resource_event_types": {
        "type": "string",
        "enum": [
          "updated",
          "deleted", 
          "other"
        ]
      },
      "resource_event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "type": "object",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/resource_event_types"
              },
              "resource_uri": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/uri_type"
                  },
                  {
                    "description": "URI of the associated resource",
                    "example": "/customers/123"    
                  }
                ]
              },
              "additions": {
                "$ref": "#/components/schemas/key_value_list"
              }
            }    
          }
        ]
      },
      "shipment_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/shipment"
          }, 
          {
            "type": "object", 
            "properties": {
              "linked_tasks": {
                "description": "List of URIs of tasks to which the shipment is linked. The URIs of the corresponding tour and drive are simply the subsets of the task_uri.",
                "type": "array", 
                "items": {
                  "allOf":[
                    {
                      "$ref": "#/components/schemas/task_uri"
                    },
                    {
                      "example": "/tours/123/drives/123/tasks/123"
                    }
                  ]
                }
              }
            }    
          }
        ]
      },
      "shipment": {
        "type": "object",
        "properties": {
          "shipment_reference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/id_type"
              },
              {
                "description": "Reference (e.g. number or name of the shipment used in shipment tracking), that is used independently of API-specific IDs and URIs."    
              }
            ]
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/address"
            },
            "description": "All addresses relevant for the shipment"
          },
          "items": {
            "type": "array",
            "description": "List of all single items of the shipment",
            "items": {
              "$ref": "#/components/schemas/item"
            }
          }, 
          "additions": {
            "$ref": "#/components/schemas/key_value_list"
          }
        }
      },
      "item": {
        "type": "object",
        "properties": {
          "item_id": {
            "$ref": "#/components/schemas/id_type"
          },
          "parent_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/id_type"
              }, 
              {
                "description": "Item ID of the package the item is part of (e.g. the ID of the\npalette to which the item belongs). With the `parentid` you are able\nto map any tree structure in the item list."
              }
            ]
          },
          "count": {
            "type": "number",
            "example": 1.3
          },
          "unit": {
            "type": "string",
            "example": "kg"
          },
          "description": {
            "type": "string",
            "example": "Deuteriumfläschchen"
          },
          "codes": {
            "type": "array",
            "description": "List of codes on the item, e.g. barcodes",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "scan_possible": {
                  "type": "boolean",
                  "description": "If the code is scannable"
                },
                "type": {
                  "type": "string",
                  "example": "QRCode",
                  "description": "Type to distinguish between different types of codes"
                }
              }
            }
          },
          "scan_required": {
            "type": "boolean",
            "description": "Indicates if the item must be scanned"
          },
          "dimension": {
            "type": "object",
            "properties": {
              "height": {
                "type": "number",
                "description": "Height in cm",
                "example": 30
              },
              "width": {
                "type": "number",
                "description": "Width in cm",
                "example": 80
              },
              "length": {
                "type": "number",
                "description": "Length in cm",
                "example": 120
              },
              "weight": {
                "type": "number",
                "description": "Weight in kg",
                "example": 566
              },
              "area": {
                "type": "number",
                "description": "Area in m2",
                "example": 0.96
              },
              "volume": {
                "type": "number",
                "example": 0.288
              },
              "cargo_space": {
                "type": "number",
                "example": 1.5
              }
            }
          },
          "adr_info": {
            "type": "object",
            "description": "Information on classification according to the 'Agreement concerning\nthe International Carriage of Dangerous Goods by Road' (ADR). Summarized information on the dangerous goods present on each drive can be found in ``adr_totals`` in the drive resource",
            "properties": {
              "points": {
                "type": "integer",
                "example": 1650
              },
              "amount": {
                "type": "number",
                "example": 500
              },
              "unit": {
                "type": "string",
                "example": "l",
                "enum": [
                  "l",
                  "kg"
                ]
              },
              "unnr": {
                "type": "string",
                "example": "1905"
              },
              "proper_shipping_name": {
                "type": "string"
              },
              "additional_description": {
                "type": "string"
              },
              "class_number": {
                "type": "string",
                "example": "4.2"
              },
              "class_name": {
                "type": "string",
                "example": "flammable liquids"
              },
              "packing_group": {
                "type": "string",
                "example": "II"
              },
              "classification_code": {
                "type": "string",
                "example": "F1"
              },
              "tunnel_restriction_code": {
                "type": "string",
                "example": "E"
              },
              "is_environmentally_hazardous": {
                "type": "boolean",
                "example": false
              },
              "is_high_risk": {
                "type": "boolean",
                "example": true
              }
            }
          }, 
          "additions": {
            "$ref": "#/components/schemas/key_value_list"
          }
        }
      },
      "task_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/task"
          }
        ]
      },
      "task": {
        "allOf": [
          {
            "$ref":  "#/components/schemas/shipment_uri" 
          }, 
          {
            "type": "object",
            "properties": {
              "task_type": {
                "type": "string",
                "description": "Custom designation for task type"
              },
              "address": {
                "$ref": "#/components/schemas/address"
              },
              "time_window": {
                "$ref": "#/components/schemas/time_window"
              },
              "description": {
                "type": "string"
              },
              "additions": {
                "$ref": "#/components/schemas/key_value_list"
              }
            }    
          }
        ]
      },
      "key_value_list": {
        "type": "array",
        "description": "List of generic key-value pairs for custom extension of the standard",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        }
      },
      "time_window": {
        "type": "object",
        "properties": {
          "earliest": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T09:28:00.000Z"
          },
          "latest": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T10:00:00.000Z"
          }
        }
      },
      "message_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          },
          {
            "$ref": "#/components/schemas/message"
          }
        ]
      },
      "message": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timestamp"
          }, 
          {
            "type": "object",
            "properties": {
              "sender": {
                "type": "string",
                "description": "Name of sender"
              },
              "message_channel_id":{
                "$ref": "#/components/schemas/id_type"
              }, 
              "message": {
                "type": "string"
              }
            }    
          }
        ]
      },
      "tacho_file_full": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta"
          }, 
          {
            "$ref": "#/components/schemas/tacho_file"
          }
        ]
      },
      "tacho_file": {
        "allOf": [
          {
            "$ref": "#/components/schemas/object_uri"
          }, 
          {
            "$ref": "#/components/schemas/driver_uri"
          }, 
          {
            "type": "object",
            "properties": {
              "file_name": {
                "type": "string",
                "description": "File name",
                "example": "123456789.DDD"
              },
              "class": {
                "type": "string",
                "enum": [
                  "driver",
                  "vehicle",
                  "all"
                ],
                "example": "driver"
              },
              "company_card": {
                "type": "string",
                "description": "The company card which was used",
                "example": "DU000000000000"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ddd",
                  "dlc",
                  "tgd",
                  "c1b_v1b"
                ],
                "example": "ddd"
              },
              "data": {
                "type": "string",
                "format": "byte",
                "description": "container data bytes encoded in Base64"
              }
            }
          }
        ]
      },
      "driver_card": {
        "type": "object",
        "properties": {
          "surname": {
            "type": "string",
            "example": "Mustermann"
          },
          "first_given_name": {
            "type": "string",
            "example": "Max"
          },
          "issue_date": {
            "type": "object",
            "properties": {
              "valid_from": {
                "type": "string",
                "format": "date",
                "example": "2017-07-21"
              },
              "valid_to": {
                "type": "string",
                "format": "date",
                "example": "2017-07-21"
              }
            }
          },
          "name_of_the_issuing_authority": {
            "type": "string"
          },
          "driver_license_number": {
            "type": "string",
            "example": "A1234567890"
          },
          "card_number": {
            "type": "string",
            "example": "DF00003563691000"
          }
        }
      },
      "breakpad": {
        "type": "object",
        "properties": {
          "axel": {
            "type": "integer",
            "minimum": 0,
            "description": "axle number front to back beginning with 0"
          },
          "wheel": {
            "type": "string",
            "enum": [
              "left",
              "right"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "mal_adjusted",
              "delayed_return",
              "delayed_breaking",
              "outworn",
              "error",
              "n/a"
            ]
          }
        }
      },
      "fms_bus_standard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/fms_truck_bus"
          },
          {
            "$ref": "#/components/schemas/fms_bus_only"
          },
          {
            "description": "All data of the Bus FMS-Standard"
          }
        ]
      }, 
      "fms_truck_standard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/fms_truck_bus"
          },
          {
            "$ref": "#/components/schemas/fms_truck_only"
          },
          {
            "description": "All data of the Truck FMS-Standard"
          }
        ]
      },
      "fms_truck_standard_and_bus_standard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/fms_truck_bus"
          }, 
          {
            "$ref": "#/components/schemas/fms_truck_only"
          },
          {
            "$ref": "#/components/schemas/fms_bus_only"
          },
          {
            "description": "All data of the Truck FMS Standard and the Bus FMS-Standard"
          }
        ]
      },
      "fms": {
        "type": "object",
        "description": "As specified in FMS-Standard description Version 04. The data is transmitted in interpreted form. `Offsets` and `per bit gain` are already calculated. Data that is sent in different repetitions on the CAN bus can be transmitted as one.",
        "properties": {
          "supporting": {
            "type": "string", 
            "enum": ["truck", "bus", "truck_and_bus"], 
            "description": "Whether the Truck FMS Standard, the Bus FMS Standard or both are supported. The according schema is used."
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/fms_truck_standard"
          }, 
          {
            "$ref": "#/components/schemas/fms_bus_standard"
          }, 
          {
            "$ref": "#/components/schemas/fms_truck_standard_and_bus_standard"
          }
        ]
      },
      "fms_telltale_status": {
        "type": "string", 
        "enum": ["off", "red", "yellow", "info"]
      },
      "fms_truck_bus": {
        "type": "object", 
        "description": "All data common in the Truck and Bus FMS Standards",
        "allOf": [
          {
            "properties": {
              "engine_total_fuel_used": {
                "type": "number", 
                "multipleOf": 0.5, 
                "minimum": 0, 
                "maximum": 2105540607.5, 
                "description": "SPN 250. <br>Accumulated amount of fuel used during vehicle operation in liters."
              }, 
              "fuel_level_1": {
                "type": "number", 
                "multipleOf": 0.4, 
                "minimum": 0,
                "maximum": 100, 
                "description": "SPN 96. <br>Ratio of volume of fuel to the total volume of fuel storage container in percent."
              }, 
              "fuel_level_2": {
                "type": "number", 
                "multipleOf": 0.4, 
                "minimum": 0, 
                "maximum": 100,
                "description": "SPN 38. <br>Ratio of volume of fuel to the total volume of fuel storage container in percent."
              }, 
              "actual_engine_percent_torque": {
                "type": "integer", 
                "multipleOf": 1, 
                "minimum": -125, 
                "maximum": 125,
                "description": "SPN 513. <br>The calculated output torque of the engine in percent. The data is transmitted in indicated torque as a percent of reference engine torque." 
              }, 
              "engine_speed": {
                "type": "number",
                "multipleOf": 0.125,
                "minimum": 0,
                "maximum": 8031.875,
                "description": "SPN 190. <br>Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by the number of cylinders in rounds per minute."
              }, 
              "engine_total_hours_of_operation": {
                "type": "number",
                "multipleOf": 0.05,
                "minimum": 0, 
                "maximum": 210554060.75, 
                "description": "SPN 247. <br>Accumulated time of operation of engine in hours."
    
              }, 
              "vehicle_identification_number": {
                "type": "string", 
                "maxLength": 200, 
                "description": "SPN 237. <br>Vehicle Identification Number as assigned by the vehicle manufacturer."
              }, 
              "sw_version_supported": {
                "type": "string", 
                "description": "SPN 2806. <br>Information that identifies which issue level of the FMS-standard document the software included in the FMS gateway supports. Four bytes, representing ab.cd type revision level identification."
              }, 
              "diagnostics_supported": {
                "type": "string", 
                "enum": ["not_supported", "supported", "do_not_care"],
                "description": "SPN 2804. <br>Status signal which indicates if the FMS Vehicle Interface (FMS Gateway) supports the handling of diagnostic messages from the vehicle network onto the FMS network."
              }, 
              "requests_supported": {
                "type": "string", 
                "enum": ["not_supported", "supported", "do_not_care"],
                "description": "SPN 2805. <br>Status signal which indicates if the FMS Vehicle Interface (FMS Gateway) will respond to requests from the FMS device for the PGNs listed in the FMS Interface Specification."
              }, 
              "high_resolution_total_vehicle_distance": {
                "type": "integer", 
                "multipleOf": 5, 
                "minimum": 0, 
                "maximum": 21055406075, 
                "description": "SPN 917. <br>Accumulated distance travelled by the vehicle during its operation in meters."
              }, 
              "vehicle_motion": {
                "type": "string", 
                "enum": ["not_detected", "detected"], 
                "description": "SPN 1611. <br>Indicates whether motion of the vehicle is detected or not."
              }, 
              "driver_2_working_state": {
                "type": "string", 
                "enum": ["rest", "driver_available", "work", "drive"], 
                "description": "SPN 1613. <br>State of work of the driver 2."
              }, 
              "driver_1_working_state": {
                "type": "string", 
                "enum": ["rest", "driver_available", "work", "drive"], 
                "description": "SPN 1612. <br>State of work of the driver 1."
              }, 
              "vehicle_overspeed": {
                "type": "string", 
                "enum": ["no_overspeed", "overspeed"], 
                "description": "SPN 1614. <br>Indicates whether the vehicle is exceeding the legal speed limit set in the tachograph." 
              }, 
              "driver_1_time_rel_states": {
                "type": "integer", 
                "minimum": 0,
                "maximum": 6,
                "description": "SPN 1617. <br>Indicates if the driver 1 approaches or exceeds working time limits (or other limits).<br>0=normal<br>1=15 min. bef. 4 1/2h <br>2=4 1/2h reached <br>3=15 min bef. 9h <br>4=9h reached <br>5=15min bef. 16h <br>6=16h reached"
              }, 
              "driver_2_time_rel_states": {
                "type": "integer", 
                "minimum": 0,
                "maximum": 6,
                "description": "SPN 1618. <br>Indicates if the driver 2 approaches or exceeds working time limits (or other limits).<br>0=normal<br>1=15 min. bef. 4 1/2h <br>2=4 1/2h reached <br>3=15 min bef. 9h <br>4=9h reached <br>5=15min bef. 16h <br>6=16h reached"
              },
              "driver_1_card": {
                "type": "string", 
                "enum": ["not_present", "present"], 
                "description": "SPN 1615. <br>Indicates the presence of driver card 1."
              },
              "driver_2_card": {
                "type": "string", 
                "enum": ["not_present", "present"],
                "description": "SPN 1616. <br>Indicates the presence of driver card 2." 
              },
              "direction_indicator": {
                "type": "string", 
                "enum": ["forward", "reverse"],
                "description": "SPN 1619. <br>Indicates the direction of the vehicle." 
              },
              "tachograph_performance ": {
                "type": "string", 
                "enum": ["normal_performance", "performance_analysis"], 
                "description": "SPN 1620. <br>Indicates the tachograph performance; including electronic or mechanical analysis, instrument analysis, speed sensor analysis, mass storage analysis, and printer analysis."
              },
              "handling_information": {
                "type": "string", 
                "enum": ["no_information", "information"],
                "description": "SPN 1621. <br>Indicates that handling information is present." 
              },
              "system_event": {
                "type": "string", 
                "enum": ["no_event", "event"],
                "description": "SPN 1622. <br>Indicates that a tachograph event has occurred." 
              },
              "tachograph_vehicle_speed": {
                "type": "number", 
                "multipleOf": 0.00390625, 
                "minimum": 0, 
                "maximum": 250.99609375, 
                "description": "SPN 1624. <br>Speed of the vehicle registered by the tachograph in kilometers per hour."
              },
              "engine_coolant_temperature": {
                "type": "integer", 
                "minimum": -40, 
                "maximum": 210, 
                "description": "SPN 110. <br>Temperature of liquid found in engine cooling system in degrees Celsius."
              },
              "ambient_air_temperature": {
                "type": "number",
                "multipleOf": 0.03125, 
                "minimum": -273, 
                "maximum": 1734.96875, 
                "description": "SPN 171. <br>Temperature of air surrounding vehicle in degrees Celsius."
              },
              "driver_1_driver_2_identification": {
                "type": "string",
                "description": "SPN 1625/1626."
              },
              "fuel_rate": {
                "type": "number", 
                "multipleOf": 0.05, 
                "minimum": 0, 
                "maximum": 3212.75, 
                "description": "SPN 183. <br>Amount of fuel consumed by engine per unit of time in liters per hour."
              },
              "instantaneous_fuel_economy": {
                "type": "number", 
                "multipleOf": 0.001953125, 
                "minimum": 0, 
                "maximum": 125.5, 
                "description": "SPN 184. <br>Current fuel economy at current vehicle velocity in kilometers per liter."
              },
              "service_brake_air_pressure_circuit_1 ": {
                "type": "integer", 
                "multipleOf": 8, 
                "minimum": 0, 
                "maximum": 2000, 
                "description": "SPN 1087. <br>The pneumatic pressure in the service brake circuit or reservoir 1 in kilopascal."
              },
              "service_brake_air_pressure_circuit_2 ": {
                "type": "integer", 
                "multipleOf": 8, 
                "minimum": 0, 
                "maximum": 2000, 
                "description": "SPN 1088. <br>The pneumatic pressure in the service brake circuit or reservoir 2 in kilopascal."
              },
              "high_resolution_engine_total_fuel_used": {
                "type": "number",
                "multipleOf": 0.001,
                "minimum": 0,
                "maximum": 4211081.215,
                "description": "SPN 5054. <br>Accumulated amount of fuel used during vehicle operation in liters. High resolution used for calculations and fleet management systems."
              },
              "aftertreatment_1_diesel_exhaust_fluid_tank_1_level": {
                "type": "number",
                "multipleOf": 0.4,
                "minimum": 0,
                "maximum": 100,
                "description": "SPN 1761. <br>Ratio of volume of diesel exhaust fluid to the total volume of diesel exhaust fluid storage container in percent."
              },
              "fms_telltale_status": {
                "type": "array", 
                "description": "The array enables the transmission of the five Telltale blocks, each of which is sent in a different repetition on the CAN bus.",
                "maxItems": 5, 
                "items":{
                  "type": "object", 
                  "properties": {
                    "telltale_block_id": {
                      "type": "integer", 
                      "minimum": 0, 
                      "maximum": 4, 
                      "description": "ID of the block the taletell status 1-15 in this item belongs to."
                    },
                    "telltale_status_1": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_2": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_3": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_4": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_5": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_6": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_7": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_8": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_9": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_10": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_11": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_12": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_13": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_14": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    },
                    "telltale_status_15": {
                      "$ref": "#/components/schemas/fms_telltale_status"
                    }
                  }
                }
              },
              "brake_pedal_position": {
                "type": "number", 
                "multipleOf": 0.4, 
                "minimum": 0, 
                "maximum": 100, 
                "description": "SPN 521. <br>Ratio of brake pedal position to maximum pedal position in percent."
              },
              "fuel_type": {
                "type": "integer", 
                "minimum": 0, 
                "maximum": 255, 
                "description": "SPN 5837. <br>Type of fuel currently being utilized by the vehicle. See table in FMS Standard description."
              },
              "total_fuel_used_gaseous": {
                "type": "number", 
                "multipleOf": 0.5,
                "minimum": 0, 
                "maximum": 2105540607.5, 
                "description": "SPN 1040. <br>Total fuel consumed (trip drive fuel + trip PTO governor moving fuel + trip PTO governor non-moving fuel + trip idle fuel) over the life of the engine in kilograms."
              },
              "retarder_torque_mode": {
                "type": "integer", 
                "minimum": 0, 
                "maximum": 15, 
                "description": "SPN 900. <br>State signal which indicates which retarder torque mode is currently generating, limiting, or controlling the torque. See Appendix D in SAE documentation."
              },
              "actual_retarder_percent_torque": {
                "type": "integer", 
                "minimum": -125, 
                "maximum": 125, 
                "description": "SPN 520. <br>Actual braking torque of the retarder as a percent of retarder configuration reference torque SPN 556."
              },
              "retarder_selection_non_engine": {
                "type": "number", 
                "multipleOf": 0.4, 
                "minimum": 0, 
                "maximum": 100, 
                "description": "SPN 1716. <br>Position of the driver's selector for retarders that are not part of the engine system, expressed as percent and determined by the ratio of current position to the maximum possible position."
              }
            }
          },
          {
            "$ref": "#/components/schemas/fms_truck_bus_mutual"
          }
        ]
      },
      "fms_truck_bus_mutual": {
        "type": "object", 
        "description": "Data specified in the `truck only` and `bus only` sections but actually occur in both of them.",
        "properties": {
          "wheel_based_speed": {
            "type": "number",
            "multipleOf": 0.00390625, 
            "minimum": 0,
            "maximum": 250.99609375,
            "description": "SPN 84. <br>Speed of the vehicle as calculated from wheel or tailshaft speed in kilometers per hour."
          },
          "clutch_switch": {
            "type": "string", 
            "enum": ["released", "depressed"], 
            "description": "SPN 598. <br> Switch signal which indicates that the clutch pedal is being pressed."
          },
          "brake_switch": {
            "type": "string", 
            "enum": ["released", "depressed"], 
            "description": "SPN 597. <br> Switch signal which indicates that the driver operated brake foot pedal is being pressed."
          },
          "cruise_control_active": {
            "type": "string", 
            "enum": ["off", "on"],
            "description": "SPN 595. <br> Whether cruise control is switched on." 
          },
         
          "parking_brake_switch": {
            "type": "string", 
            "enum": ["not_set", "set"],
            "description": "SPN 70. <br>Switch signal which indicates when the parking brake is set."
          },
          "cruise_control_states": {
            "type": "string", 
            "enum": ["off", "hold", "accelerate", "decelerate", "resume", "set", "accelerate_override"], 
            "description": "SPN 527."
          },
          "accelerator_pedal_position": {
            "type": "number", 
            "multipleOf": 0.4, 
            "minimum": 0, 
            "maximum": 100, 
            "description": "SPN 91. <br>The ratio of actual position of the analogue engine speed/torque request input device (such as an accelerator pedal or throttle lever) to the maximum position of the input device in percent."
          }
        }
      },
      "fms_truck_only": {
        "type": "object",
        "description": "Data specified in the `truck only` section that does not appear in the `bus only` section.",
        "allOf": [
          {
            "properties": {
              "pto_state": {
                "type": "string", 
                "enum": ["off", "set"],
                "description": "SPN 976. <br> This parameter is used to indicate the current state or mode of operation by the power takeoff (PTO) device."
              },
              "engine_percent_load_at_current_speed": {
                "type": "integer", 
                "minimum": 0, 
                "maximum": 125, 
                "description": "SPN 92. <br>The ratio of actual engine percent torque (indicated) to maximum indicated torque available at the current engine speed, clipped to zero torque during engine braking."
              },
              "vehicle_weight": {
                "type": "array", 
                "description": "The array enables the transmission of up to 225 (15*15) axle weights, each of which is sent in a different repetition on the CAN bus.", 
                "maxItems": 225,
                "items": {
                  "type": "object",
                  "properties": {
                    "axle_location": {
                      "type": "integer", 
                      "minimum": 1, 
                      "maximum": 15, 
                      "description": "SPN 928. <br>To identify to which of several similar devices (such as tires or fuel tanks) the information applies. The 4 bits represent a position number, counting front to back on the vehicle."
                    },
                    "tire_location": {
                      "type": "integer", 
                      "minimum": 1, 
                      "maximum": 15, 
                      "description": "SPN 928. <br>To identify to which of several similar devices (such as tires or fuel tanks) the information applies. The 4 bits represent a position number, counting left to right when facing in the direction of normal vehicle travel (forward)."
                    },
                    "axle_weight": {
                      "type": "number", 
                      "multipleOf": 0.5, 
                      "minimum": 0,
                      "maximum": 32127.5, 
                      "description": "SPN 582. <br>Total mass imposed by the tires on the road surface at the specified axle."
                    }
                  }    
                }
              },
              "service_distance": {
                "type": "integer", 
                "multipleOf": 5, 
                "minimum": -160635, 
                "maximum": 160640, 
                "description": "SPN 914. <br>The distance which can be travelled by the vehicle before the next service inspection is required in kilometers. A negative distance is transmitted if the service inspection has been passed."
              },
              "at_least_one_pto_engaged": {
                "type": "string",
                "enum": ["no", "at_least_one"],
                "description": "SPN 3948. <br>Indicates that at least one PTO is engaged."
              },
              "gross_combination_vehicle_weight": {
                "type": "integer", 
                "multipleOf": 10, 
                "minimum": 0, 
                "maximum": 642550,
                "description": "SPN 1760. <br>The total weight of the truck and all attached trailers in kilograms."
              }
            }
          }
        ]
      },
      "fms_lock_status_door": {
        "type": "string", 
        "enum": ["unlocked", "locked"]
      },
      "fms_enable_status_door": {
        "type": "string", 
        "enum": ["disabled", "enabled"]
      },
      "fms_open_status_door": {
        "type": "string", 
        "enum": ["closed", "open"]
      },
      "fms_bus_only": {
        "allOf": [
          {
            "type": "object",
            "description": "Data specified in the `bus only` section that does not appear in the `truck only` section.",    
            "properties": {
              "status_2_of_doors": {
                "type": "string", 
                "enum": ["all_disabled", "at_least_one_enabled"], 
                "description": "SPN 3411. <br>Composite indication of all bus door statuses."
              },
              "ramp_wheel_chairlift": {
                "type": "string", 
                "enum": ["inside", "outside"], 
                "description": "SPN 1820. <br>Signal which indicates the actual position of the ramp / wheel chair lift."
              },
              "position_of_doors": {
                "type": "string", 
                "enum": ["at_least_one_open", "closing_last", "all_closed"], 
                "description": "SPN 1821. <br>Signal which indicates the actual position of the doors."
              },
              "lock_status_door_1": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3412."
                  }
                ]
              }, 
              "open_status_door_1": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3413."
                  }
                ]
              },
              "enable_status_door_1": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3414."
                  }
                ]
              },
              "lock_status_door_2": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3415."
                  }
                ]
              }, 
              "open_status_door_2": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3416."
                  }
                ]
              },
              "enable_status_door_2": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3417."
                  }
                ]
              },
              "lock_status_door_3": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3418."
                  }
                ]
              }, 
              "open_status_door_3": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3419."
                  }
                ]
              },
              "enable_status_door_3": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3420."
                  }
                ]
              },
              "lock_status_door_4": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3421."
                  }
                ]
              }, 
              "open_status_door_4": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3422."
                  }
                ]
              },
              "enable_status_door_4": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3423."
                  }
                ]
              },
              "lock_status_door_5": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3424."
                  }
                ]
              }, 
              "open_status_door_5": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3425."
                  }
                ]
              },
              "enable_status_door_5": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3426."
                  }
                ]
              },
              "lock_status_door_6": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3427."
                  }
                ]
              }, 
              "open_status_door_6": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3428."
                  }
                ]
              },
              "enable_status_door_6": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3429."
                  }
                ]
              },
              "lock_status_door_7": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3430."
                  }
                ]
              }, 
              "open_status_door_7": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3431."
                  }
                ]
              },
              "enable_status_door_7": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3432."
                  }
                ]
              },
              "lock_status_door_8": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3433."
                  }
                ]
              }, 
              "open_status_door_8": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3434."
                  }
                ]
              },
              "enable_status_door_8": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3435."
                  }
                ]
              },
              "lock_status_door_9": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3436."
                  }
                ]
              }, 
              "open_status_door_9": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3437."
                  }
                ]
              },
              "enable_status_door_9": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3438."
                  }
                ]
              },
              "lock_status_door_10": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_lock_status_door"
                  }, 
                  {
                    "description": "SPN 3439."
                  }
                ]
              }, 
              "open_status_door_10": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_open_status_door"
                  }, 
                  {
                    "description": "SPN 3440."
                  }
                ]
              },
              "enable_status_door_10": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/fms_enable_status_door"
                  }, 
                  {
                    "description": "SPN 3441."
                  }
                ]
              },
              "seconds": {
                "type": "number", 
                "multipleOf": 0.25, 
                "minimum": 0, 
                "maximum": 62.5, 
                "description": "SPN 959. <br>Part of a parameter used to represent time."
              },
              "minutes": {
                "type": "integer", 
                "minimum": 0,
                "maximum": 250,
                "description": "SPN 960. <br>Part of a parameter used to represent time."
              },
              "hours": {
                "type": "integer",
                "minimum": 0, 
                "maximum": 250,
                "description": "SPN 961. <br>Part of a parameter used to represent time."
              }, 
              "month": {
                "type": "integer", 
                "minimum": 1, 
                "maximum": 12, 
                "description": "SPN 963. <br>Part of a parameter used to represent a calendar date."
              }, 
              "day": {
                "type": "integer",
                "minimum": 1,
                "maximum": 31,
                "description": "SPN 962. <br>Part of a parameter used to represent a calendar date."
              }, 
              "year": {
                "type": "integer", 
                "minimum": 1985, 
                "maximum": 2235, 
                "description": "SPN 964. <br>Part of a parameter used to represent a calendar date."
              }, 
              "alternator_status_1": {
                "type": "string", 
                "enum": ["not_charging", "charging"], 
                "description": "SPN 3353. <br>Actual alternator status 1. "
              }, 
              "alternator_status_2": {
                "type": "string", 
                "enum": ["not_charging", "charging"], 
                "description": "SPN 3354. <br>Actual alternator status 2. "
              },
              "alternator_status_3": {
                "type": "string", 
                "enum": ["not_charging", "charging"], 
                "description": "SPN 3355. <br>Actual alternator status 3. "
              }, 
              "alternator_status_4": {
                "type": "string", 
                "enum": ["not_charging", "charging"], 
                "description": "SPN 3356. <br>Actual alternator status 4. "
              }, 
              "selected_gear": {
                "type": "integer", 
                "minimum": -125, 
                "maximum": 125, 
                "description": "SPN 524. <br>The gear that the transmission will attempt to achieve during the current shift if a shift is in progress, or the next shift if one is pending. `-125`=neutral, `125`=park"
              }, 
              "current_gear": {
                "type": "integer", 
                "minimum": -125, 
                "maximum": 125, 
                "description": "SPN 524. <br>The gear currently engaged in the transmission or the last gear engaged while the transmission is in the process of shifting to the new or selected gear. Transitions toward a destination gear will not be indicated. Once the selected gear has been engaged then Current Gear will reflect that gear. `-125`=neutral, `125`=park"
              }, 
              "bellow_pressure_front_axle_left": {
                "type": "number", 
                "multipleOf": 0.1,
                "minimum": 0, 
                "maximum": 6425, 
                "description": "SPN 1725. <br>Used for bellow pressure information. In kilopascal."
              }, 
              "bellow_pressure_front_axle_right": {
                "type": "number", 
                "multipleOf": 0.1,
                "minimum": 0, 
                "maximum": 6426, 
                "description": "SPN 1725. <br>Used for bellow pressure information. In kilopascal."
              }, 
              "bellow_pressure_rear_axle_left": {
                "type": "number", 
                "multipleOf": 0.1,
                "minimum": 0, 
                "maximum": 6427, 
                "description": "SPN 1725. <br>Used for bellow pressure information. In kilopascal."
              }, 
              "bellow_pressure_rear_axle_right": {
                "type": "number", 
                "multipleOf": 0.1,
                "minimum": 0, 
                "maximum": 6428, 
                "description": "SPN 1725. <br>Used for bellow pressure information. In kilopascal."
              }, 
              "hybrid_battery_pack_remaining_charge": {
                "type": "number",
                "multipleOf": 0.0025,
                "minimum": 0,
                "maximum": 160.6375,
                "description": "SPN 5464. <br> Indicates the hybrid battery pack remaining charge in percent."
              }, 
              "steering_wheel_angle": {
                "type": "number", 
                "multipleOf": 0.0009765625, 
                "minimum": -31.3740234375, 
                "maximum": 31.375, 
                "description": "SPN 1807. <br>The main operator`s steering wheel angle (on the steering column, not the actual wheel angle) in radian."
              }
            }
          }
        ]
      },
      "id": {
        "type": "object", 
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id_type"
          }
        }
      },
      "id_type": {
        "type": "string"
      },
      "uri": {
        "type": "object", 
        "properties": {
          "uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "uri_type": {
        "type": "string", 
        "format": "uri"
      },
      "url_type": {
        "type": "string", 
        "format": "url"
      },
      "cursor": {
        "description": "Cursor for cursor-based pagination.",
        "type": "string"
      },
      "fms_data_status": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "error",
              "not_available"
            ],
            "description": "Indicates availability of data"
          }
        }
      },
      "coordinates": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "WGS84 latitude"
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "WGS84 longitude"
          }
        }
      },
      "timestamp": {
        "type": "object",
        "properties": {
          "timestamp": {
            "allOf":[
              {
                "$ref": "#/components/schemas/timestamp_type"
              },
              {
                "description": "Creation time of the data set"
              }
            ]
          }
        }
      },
      "timestamp_type": {
        "type": "string",
        "format": "date-time"
      },
      "object_uri": {
        "type": "object", 
        "properties":{
          "object_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "tour_uri": {
        "type": "object", 
        "properties": {
          "tour_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "drive_uri": {
        "type": "object", 
        "properties": {
          "drive_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "task_uri": {
        "type": "object", 
        "properties": {
          "task_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "driver_uri": {
        "type": "object", 
        "properties": {
          "driver_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "customer_uri": {
        "type": "object", 
        "properties": {
          "customer_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "shipment_uri": {
        "type": "object", 
        "properties": {
          "shipment_uri": {
            "$ref": "#/components/schemas/uri_type"
          }
        }
      },
      "vehicle_group_id": {
        "type": "object",
        "properties": {
          "vehicle_group_id": {         
            "$ref": "#/components/schemas/id_type"
          }
        }
      }
    }
  }
}
